(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{325:function(s,a,e){"use strict";e.r(a);var n=e(10),t=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"探索-redux-原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#探索-redux-原理"}},[s._v("#")]),s._v(" 探索 Redux 原理")]),s._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("react 和状态管理 redux 是紧密结合的，而本身又没有任何联系。react 可以不使用 redux 管理状态，redux 也可以脱离 react 独立存在。随着 react 的项目越来越复杂，state 变的繁重，各种 prop 和 state 的转变让我们在开发过程中变得头晕眼花，react 本来就是一个专注于 UI 层的库，本不应该让繁杂的 prop 和 state 的逻辑掺杂进来。于是 Flux 的架构出现了，Flux 架构模式用于抽离 react 的 state 能更好的去构建项目，Flux 架构模式的实践有好多中，显然 redux 是成功的。")]),s._v(" "),a("h3",{attrs:{id:"redux-的设计原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux-的设计原则"}},[s._v("#")]),s._v(" redux 的设计原则")]),s._v(" "),a("p",[s._v("redux 有三大设计原则")]),s._v(" "),a("p",[s._v("1.单一数据源")]),s._v(" "),a("p",[s._v("2.状态是只读的")]),s._v(" "),a("p",[s._v("3.使用纯函数编写 reducer")]),s._v(" "),a("h4",{attrs:{id:"单一数据源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单一数据源"}},[s._v("#")]),s._v(" 单一数据源")]),s._v(" "),a("p",[s._v("整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。")]),s._v(" "),a("p",[s._v("这让同构应用开发变得非常容易。来自服务端的 state 可以在无需编写更多代码的情况下被序列化并注入到客户端中。由于是单一的 state tree ，调试也变得非常容易。在开发中，你可以把应用的 state 保存在本地，从而加快开发速度。此外，受益于单一的 state tree ，以前难以实现的如“撤销/重做”这类功能也变得轻而易举。")]),s._v(" "),a("h4",{attrs:{id:"state-是只读的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-是只读的"}},[s._v("#")]),s._v(" State 是只读的")]),s._v(" "),a("p",[s._v("唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。")]),s._v(" "),a("p",[s._v("这样确保了视图和网络请求都不能直接修改 state，相反它们只能表达想要修改的意图。因为所有的修改都被集中化处理，且严格按照一个接一个的顺序执行，因此不用担心竞态条件（race condition）的出现。 Action 就是普通对象而已，因此它们可以被日志打印、序列化、储存、后期调试或测试时回放出来。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("store.dispatch({\n  type: 'COMPLETE_TODO',\n  index: 1\n})\n\nstore.dispatch({\n  type: 'SET_VISIBILITY_FILTER',\n  filter: 'SHOW_COMPLETED'\n})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h4",{attrs:{id:"使用纯函数来执行修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用纯函数来执行修改"}},[s._v("#")]),s._v(" 使用纯函数来执行修改")]),s._v(" "),a("p",[s._v("为了描述 action 如何改变 state tree ，你需要编写 reducers。")]),s._v(" "),a("p",[s._v("Reducer 只是一些纯函数，它接收先前的 state 和 action，并返回新的 state。刚开始你可以只有一个 reducer，随着应用变大，你可以把它拆成多个小的 reducers，分别独立地操作 state tree 的不同部分，因为 reducer 只是函数，你可以控制它们被调用的顺序，传入附加数据，甚至编写可复用的 reducer 来处理一些通用任务，如分页器。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("function visibilityFilter(state = 'SHOW_ALL', action) {\n  switch (action.type) {\n    case 'SET_VISIBILITY_FILTER':\n      return action.filter\n    default:\n      return state\n  }\n}\n\nfunction todos(state = [], action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          text: action.text,\n          completed: false\n        }\n      ]\n    case 'COMPLETE_TODO':\n      return state.map((todo, index) => {\n        if (index === action.index) {\n          return Object.assign({}, todo, {\n            completed: true\n          })\n        }\n        return todo\n      })\n    default:\n      return state\n  }\n}\n\nimport { combineReducers, createStore } from 'redux'\nlet reducer = combineReducers({ visibilityFilter, todos })\nlet store = createStore(reducer)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br")])]),a("h3",{attrs:{id:"redux-的四个角色"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redux-的四个角色"}},[s._v("#")]),s._v(" redux 的四个角色")]),s._v(" "),a("p",[s._v("redux 提供了一系列规则来规定我们来写代码。可以大致分为四个角色：")]),s._v(" "),a("h4",{attrs:{id:"_1-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-action"}},[s._v("#")]),s._v(" 1.action")]),s._v(" "),a("p",[s._v("action 是承载状态的载体，一般 action 将视图所产出的数据，发送到 reducer 进行处理。action 的书写格式一般是这样：")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v('const addAction = {\n    type:"ADD",\n    value:.....\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("action 其实就是一个 JavaScript 对象，它必须要有一个 type 属性用来标识这个 action 是干嘛的(也可以认为家的地址，去 reducer 中找家)，value 属性是 action 携带来自视图的数据。")]),s._v(" "),a("p",[s._v("action 的表示方式也可以是一个函数，这样可以更方面的构建 action,但这个函数必须返回一个对象。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v('const addAction = (val) => ({\n    type:"ADD",\n    value: val\n})\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这样拿到的数据就灵活多了。")]),s._v(" "),a("p",[s._v("对于 action 的 type 属性，一般如果 action 变的庞大的话会把所有的 type 抽离出来到一个 constants 中，例如：")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("const ADDTODO = 'ADDTODO',\nconst DELETETODO = 'DELETEDOTO'\n\nexport {\n    ADDTODO,\n    DELETETODO,\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("这样可以让 type 更清晰一些。")]),s._v(" "),a("h4",{attrs:{id:"_2-reducer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-reducer"}},[s._v("#")]),s._v(" 2.reducer")]),s._v(" "),a("p",[s._v("reducer 指定了应用状态的变化如何响应 actions 并发送到 store。 在 redux 的设计原则中提到使用纯函数来编写 reducer，目的是为了让 state 变的可预测。reducer 的书写方式一般是这样：")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v(" const reducer = (state ={},action){\n     switch(action.type){\n         case :\n            ......\n         case :\n            ......\n         case :\n            ......\n         default :\n            return state;\n     }\n }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("使用 switch 判断出什么样的 action 应该使用什么样的逻辑去处理。")]),s._v(" "),a("p",[s._v("拆分 reducer")]),s._v(" "),a("p",[s._v("当随着业务的增多，那么 reducer 也随着增大，显然一个 reducer 是不可能的，于是必须要拆分 reducer，拆分 reducer 也是有一定的套路的：比如拆分一个 TodoList，就可以把 todos 操作放在一起，把对 todo 无关的放在一起，最终形成一个根 reducer。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("function visibilityFilter(state,action){\n    switch(action.type){\n        case :\n            ......\n        case :\n            ......\n        default :\n            return state;\n    }\n}\nfunction todos(state,action){\n    switch(action.type){\n        case :\n            ......\n        case :\n            ......\n        default :\n            return state;\n    }\n}\n//根reducer\nfunction rootReducer(state = {}, action) {\n  return {\n    visibilityFilter: visibilityFilter(state.visibilityFilter, action), \n    todos: todos(state.todos, action)\n  }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("p",[s._v("这样做的好处在于业务逻辑的分离，让根 reducer 不再那么繁重。好在 redux 提供了 combineReducers 方法用于构建 rootReducer")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("const rootReducer = combineReducers({\n    visibilityFilter,\n    todos,\n})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这部分代码和上面 rootReducer 的作用完全相同。它的原理是通过传入对象的 key-value 把所有的 state 进行一个糅合")]),s._v(" "),a("h4",{attrs:{id:"_3-dispatch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-dispatch"}},[s._v("#")]),s._v(" 3.dispatch")]),s._v(" "),a("p",[s._v("dispatch 的作用是派发一个 action 去执行 reducer。我觉得 dispatch 就是一个发布者，和 subscribe 一起组合成订阅发布者模式。使 dispatch 派发：")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v('\nconst action = {\n    type: "ADD",\n    value: "Hello Redux",\n}\ndispatch(action);\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h4",{attrs:{id:"_4-store"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-store"}},[s._v("#")]),s._v(" 4.store")]),s._v(" "),a("p",[s._v("store 可以说是 redux 的核心了。开头也提到 store 是 redux 状态管理的唯一数据源，除此之外，store 还是将 dispatch、reducer 等联系起来的命脉。")]),s._v(" "),a("p",[s._v("store 通过 redux 提供的 createStore 创建，它是一个对象，有如下属性：")]),s._v(" "),a("p",[s._v("store.getState() 获取状态的唯一途径\nstore.dispatch(action) 派发 action 响应 reducer\nstore.subscribe(handler) 监听状态的变化")]),s._v(" "),a("p",[s._v("创建 store：")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("const store = Redux.createStore(reducer,initialState,enhancer);\n//1. reducer就是我们书写的reducer\n//2. initialState是初始化状态\n//3. enhancer是中间件\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"middleware"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#middleware"}},[s._v("#")]),s._v(" Middleware")]),s._v(" "),a("p",[s._v("在创建 store 的时候 createStore 是可以传入三个参数的，第三个参数就是中间件，使用 redux 提供的 applyMiddleware 来调用，applyMiddleware 相当于是对 dispatch 的一种增强，通过中间件可以在 dispatch 过程中做一些事情，比如打 logger、thunk(异步 action)等等。")]),s._v(" "),a("p",[s._v("使用方式如下：")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v('//异步action中间件\nimport thunk from "redux-thunk";\nconst store = Redux.createStore(reducer,initialState,applMiddleware(thunk));\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("学习先告一段落，既然懂得了 redux 的思想（参考：https://redux.js.org/basics/usage-with-react，https://redux.js.org/basics/usage-with-react），那么接下来探索并手写一个简易版的 redux。")]),s._v(" "),a("h2",{attrs:{id:"手写一个-min-redux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手写一个-min-redux"}},[s._v("#")]),s._v(" 手写一个 min-Redux")]),s._v(" "),a("h3",{attrs:{id:"createstore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#createstore"}},[s._v("#")]),s._v(" createStore")]),s._v(" "),a("p",[s._v("要想了解 redux，必然要先了解它的核心，它的核心就是 createStore 这个函数，store、getState,dispatch 都在这里产出。我个人觉得 createStore 是一个提供一系列方法的订阅发布者模式：通过 subscribe 订阅 store 的变化，通过 dispatch 派发。那么下面就来实现一下这个 createStore。")]),s._v(" "),a("p",[s._v("从上面 store 中可以看出。创建一个 store 需要三个参数；")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("/1.接受的rootReducer\n//2.初始化的状态\n//3.dispatch的增强器(中间件)\nconst createStore = (reducer,initialState,enhancer) => {\n    \n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("createStore 还返回一些列函数接口提供调用")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("const crateStore = (reducer, initialState, enhancer) => {\n    \n    return {\n        getState,\n        dispatch,\n        subscribe,\n        replaceReducer,\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h4",{attrs:{id:"getstate-的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getstate-的实现"}},[s._v("#")]),s._v(" getState 的实现")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("let state = initialState;\nconst getState = () => {\n    return state;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h4",{attrs:{id:"subscribe-的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#subscribe-的实现"}},[s._v("#")]),s._v(" subscribe 的实现")]),s._v(" "),a("p",[s._v("subscribe 是 createStore 的订阅者，开发者通过这个方法订阅，当 store 改变的时候执行监听函数。subscribe 是典型的高阶函数，它的返回值是一个函数，执行该函数移除当前监听函数。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("//创建一个监听时间队列\nlet subQueue = [];\n\nconst subscribe = (listener) => {\n    //把监听函数放入到监听队列里面\n    subQueue.push(listener);\n    return () => {\n        //找到当前监听函数的索引\n        let idx = subQueue.indexOf(listener);\n        if(idx > -1){\n            //通过监听函数的索引把监听函数移除掉。\n            subQueue.splice(idx,1);\n        }\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h4",{attrs:{id:"dispatch-的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dispatch-的实现"}},[s._v("#")]),s._v(" dispatch 的实现")]),s._v(" "),a("p",[s._v("dispatch 是 createStore 的发布者，dispatch 接受一个 action，来执行 reducer。dispatch 在执行 reducer 的同时会执行所有的监听函数(也就是发布)。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v('let currentReducer = reducer;\nlet isDispatch = false;\nconst dispatch = (action) => {\n    //这里使用isDispatch做标示，就是说只有当上一个派发完成之后才能派发下一个\n    if(isDispatch){\n        throw new Error("dispatch error");\n    }\n    try{\n        state = currentReducer(state,action);\n        isDispatch = true;\n    }finally{\n        isDispatch = false;\n    }\n    \n    //执行所有的监听函数\n    subQueue.forEach(sub => sub.apply(null));\n    return action;\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h4",{attrs:{id:"replacereducer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replacereducer"}},[s._v("#")]),s._v(" replaceReducer")]),s._v(" "),a("p",[s._v("replaceReducer 顾名思义就是替换 reducer 的意思。再执行 createState 方法的时候 reducer 就作为第一个参数传进去，如果后面想要重新换一个 reducer，来代码写一下。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v('const replaceReducer = (reducer) => {\n    //传入一个reduce作为参数，把它赋予currentReducer就可以了。\n    currentReducer = reducer;\n    //更该之后会派发一次dispatch，为什么会派发等下再说。\n    dispatch({type:"REPLACE"});\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h4",{attrs:{id:"dispatch-type-init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dispatch-type-init"}},[s._v("#")]),s._v(" dispatch({type:”INIT”});")]),s._v(" "),a("p",[s._v("上面已经实现了 createStore 的四个方法，剩下的就是 replaceReducer 中莫名的派发了一个 type 为 REPLACE 的 action，而且翻到源码的最后，也派发一个 type 为 INIT 的 action，为什么呢？")]),s._v(" "),a("p",[s._v("其实当使用 createStore 创建 Store 的时候，我们都知道，第一个参数为 reducer，第二个参数为初始化的 state。当如果不写第二个参数的时候，我们再来看一下 reducer 的写法")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("const reducer = (state = {}, action){\n    switch(action.type){\n        default:\n            return state;\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("一般在写 reducer 的时候都会给 state 写一个默认值，并且 default 出默认的 state。当 createStore 不存在，这个默认值如何存储在 Store 中呢？就是这个最后派发的 type:INIT 的作用。在 replaceReducer 中派发也是这个原因，更换 reducer 后派发。")]),s._v(" "),a("h4",{attrs:{id:"完整的-createstore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#完整的-createstore"}},[s._v("#")]),s._v(" 完整的 createStore")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("/**\n * \n * @param {*} reducer   //reducer\n * @param {*} initState    //初始状态\n * @param {*} middleware   //中间件\n */\nconst createStore = (reducer, initState,enhancer) => {\n\n    let initialState;       //用于保存状态\n    let currentReducer = reducer;        //reducer\n    let listenerQueue = []; //存放所有的监听函数\n    let isDispatch = false;\n\n    if(initState){\n        initialState = initState;\n    }\n\n    if(enhancer){\n        return enhancer(createStore)(reducer,initState);\n    }\n    /**\n     * 获取Store\n     */\n    const getState = () => {\n        //判断是否正在派发\n        if(isDispatch){\n            throw new Error('dispatching...')\n        }\n        return initialState;\n    }\n\n    /**\n     * 派发action 并触发所有的listeners\n     * @param {*} action \n     */\n    const dispatch = (action) => {\n        //判断是否正在派发\n        if(isDispatch){\n            throw new Error('dispatching...')\n        }\n        try{\n           isDispatch = true;\n           initialState = currentReducer(initialState,action);\n        }finally{\n            isDispatch = false;\n        }\n        //执行所有的监听函数\n        for(let listener of listenerQueue){\n            listener.apply(null);\n        }\n    }\n    /**\n     * 订阅监听\n     * @param {*} listener \n     */\n    const subscribe = (listener) => {\n        listenerQueue.push(listener);\n        //移除监听\n        return function unscribe(){\n            let index = listenerQueue.indexOf(listener);\n            let unListener = listenerQueue.splice(index,1);\n            return unListener;\n        }\n    }\n\n    /**\n     * 替换reducer\n     * @param {*} reducer \n     */\n    const replaceReducer = (reducer) => {\n        if(reducer){\n            currentReducer = reducer;\n        }\n        dispatch({type:'REPLACE'});\n\n    }\n    dispatch({type:'INIT'});\n    return {\n        getState,\n        dispatch,\n        subscribe,\n        replaceReducer\n    }\n}\n\nexport default createStore;`\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br")])]),a("h3",{attrs:{id:"compose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compose"}},[s._v("#")]),s._v(" compose")]),s._v(" "),a("p",[s._v("在 redux 中提供了一个组合函数，如果你知道函数式编程的话，那么对 compose 一定不陌生。如果不了解的话，那我说一个场景肯定就懂了。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("//有fn1，fn2，fn3这三个函数，写出一个compose函数实现一下功能\n//1.  compose(fn1,fn2,fn3) 从右到左执行。\n//2.  上一个执行函数的结果作为下一个执行函数的参数。\nconst compose = (...) => {\n    \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面的需求就是 compose 函数，也是一个常考的面试题。如何实现实现一个 compose？一步一步来。")]),s._v(" "),a("p",[s._v("首先 compose 接受的是一系列函数。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("const compose = (...fns) => {\n    \n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("从右到左执行，我们采用数组的 reduce 方法，利用惰性求值的方式。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("const compose = (...fns) => fns.reduce((f,g) => (...args) => f(g(args)));\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"applaymiddleware"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#applaymiddleware"}},[s._v("#")]),s._v(" applayMiddleware")]),s._v(" "),a("p",[s._v("redux 中的中间件就是对 dispatch 的一种增强，在 createStore 中实现这个东西很简单。源码如下：")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("const createStore = (reducer,state,enhancer) => {\n    //判断第三个参数的存在。\n    if(enhancer && type enhancer === 'function') {\n        //满足enhance存在的条件，直接return，组织后面的运行。\n        //通过柯里化的方式传参\n        //为什么传入createStore？\n            //虽然是增强，自然返回之后依然是一个store对象，所以要使用createStore做一些事情。\n        //后面两个参数\n            //中间件是增强，必要的reducer和state也必要通过createStore传进去。\n        return enhancer(crateStore)(reducer,state);\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("上面就是中间件再 createStore 中的实现。")]),s._v(" "),a("p",[s._v("中间件的构建通过 applyMiddleware 实现，来看一下 applyMiddleware 是怎么实现。由上面可以看出 applyMiddleware 是一个柯里化函数")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("const applyMiddleware = (crateStore) => (...args) => {\n    \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("在 applyMiddleware 中需要执行 createStore 来得到接口方法。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("\nconst applyMiddleware =(...middlewares) => (createStore) => (...args) => {\n    let store = createStore(...args);\n    //占位dispatch，避免在中间件过程中调用\n    let dispatch = () => {\n        throw new Error('error')\n    }\n    let midllewareAPI = {\n        getState: store.getState,\n        dispatch,\n    }\n    //把middlewareAPI传入每一个中间件中\n    const chain = middlewares.map(middleware => middleware(middlewareAPI));\n    //增强dispatch生成，重写占位dispatch,把store的默认dispatch传进去，\n    dispatch = compose(...chain)(store.dispatch);\n    \n    //最后把增强的dispatch和store返回出去。\n    return {\n        ...store,\n        dispatch\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("h4",{attrs:{id:"如何写一个中间件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何写一个中间件"}},[s._v("#")]),s._v(" 如何写一个中间件")]),s._v(" "),a("p",[s._v("根据 applyMiddleware 中间件参数的传入，可以想出一个基本的中间件是这样的：")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("const middleware = (store) => next => action => {\n    //业务逻辑\n    //store是传入的middlewareAPI\n    //next是store基础的dispatch\n    //action是dispatch的action\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h4",{attrs:{id:"异步-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步-action"}},[s._v("#")]),s._v(" 异步 action")]),s._v(" "),a("p",[s._v("在写逻辑的时候必然会用到异步数据的，我们知道 reducer 是纯函数，不允许有副作用操作的，从上面到现在也可以明白整个 redux 都是函数式编程的思想，是不存在副作用的，那么异步数据怎么实现呢？必然是通过 applyMiddleware 提供的中间件接口实现了。")]),s._v(" "),a("p",[s._v("异步中间件必须要求 action 是一个函数，根据上面中间件的逻辑，我们来写一下。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-plain"}},[a("code",[s._v("const middleware = (store) => next => action => {\n    if(typeof action === 'function'){\n        action(store.dispatch,store.getState);\n    }\n    next(action);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("判断传入的 action 是否是一个函数，如果是函数使用增强 dispatch，如果不是函数使用普通的 dispatch。")])])}),[],!1,null,null,null);a.default=t.exports}}]);