(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{230:function(s,n,a){"use strict";a.r(n);var e=a(0),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"typescript-使用手册"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript-使用手册"}},[s._v("#")]),s._v(" TypeScript 使用手册")]),s._v(" "),a("h2",{attrs:{id:"typescript-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript-介绍"}},[s._v("#")]),s._v(" TypeScript 介绍")]),s._v(" "),a("p",[s._v("TypeScript 是一种由微软开发的自由和开源的编程语言，它是 JavaScript 的一个超集，扩展了 JavaScript 的语法，因此现有的 JavaScript 代码可与 TypeScript 一起工作无需任何修改，TypeScript 通过类型注解提供编译时的静态类型检查。")]),s._v(" "),a("h4",{attrs:{id:"typescript-与-javascript-的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript-与-javascript-的比较"}},[s._v("#")]),s._v(" TypeScript 与 JavaScript 的比较")]),s._v(" "),a("p",[s._v("TypeScript 与 JavaScript 相比进步的地方包括：加入注释，让编辑器理解所支持的对象和函数，编译器会移除注释，不会增加开销；增加一个完整的类结构，使之更新是传统的对象语言。最大的好处就是加入了类型检查，可以让我们书写代码的时候更加规范。")]),s._v(" "),a("h4",{attrs:{id:"_5-分钟上手-typescript-摘抄于官网"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-分钟上手-typescript-摘抄于官网"}},[s._v("#")]),s._v(" 5 分钟上手 TypeScript "),a("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("摘抄于官网"),a("OutboundLink")],1)]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm install -g typescript\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h5",{attrs:{id:"构建你的第一个-typescript-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建你的第一个-typescript-文件"}},[s._v("#")]),s._v(" 构建你的第一个 TypeScript 文件")]),s._v(" "),a("p",[s._v("在编辑器，将下面的代码输入到 greeter.ts 文件里：")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function greeter(person) {\n    return "Hello, " + person;\n}\n\nlet user = "Jane User";\n\ndocument.body.innerHTML = greeter(user);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h5",{attrs:{id:"编译代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译代码"}},[s._v("#")]),s._v(" 编译代码")]),s._v(" "),a("p",[s._v("我们使用了.ts 扩展名，但是这段代码仅仅是 JavaScript 而已。 你可以直接从现有的 JavaScript 应用里复制/粘贴这段代码。")]),s._v(" "),a("p",[s._v("在命令行上，运行 TypeScript 编译器：")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("tsc greeter.ts\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("输出结果为一个 greeter.js 文件，它包含了和输入文件中相同的 JavsScript 代码。 一切准备就绪，我们可以运行这个使用 TypeScript 写的 JavaScript 应用了！")]),s._v(" "),a("p",[s._v("接下来让我们看看 TypeScript 工具带来的高级功能。 给 person 函数的参数添加: string 类型注解，如下：")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function  greeter(person:string){\n    return 'hello ' + person;\n}\nlet usr = \"Jane User\";\ndocument.body.textContent = greeter(usr);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h4",{attrs:{id:"类型注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型注解"}},[s._v("#")]),s._v(" 类型注解")]),s._v(" "),a("p",[s._v("TypeScript 里的类型注解是一种轻量级的为函数或变量添加约束的方式。 在这个例子里，我们希望 greeter 函数接收一个字符串参数。 然后尝试把 greeter 的调用改成传入一个数组：")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function greeter(person: string) {\n    return "Hello, " + person;\n}\n\nlet user = [0, 1, 2];\n\ndocument.body.innerHTML = greeter(user);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("重新编译，你会看到产生了一个错误。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://wendaoshuai66.github.io/study/note/images/ts1.png",alt:""}})]),s._v(" "),a("p",[s._v("类似地，尝试删除 greeter 调用的所有参数。 TypeScript 会告诉你使用了非期望个数的参数调用了这个函数。 在这两种情况中，TypeScript 提供了静态的代码分析，它可以分析代码结构和提供的类型注解。")]),s._v(" "),a("p",[s._v("要注意的是尽管有错误，greeter.js 文件还是被创建了。 就算你的代码里有错误，你仍然可以使用 TypeScript。但在这种情况下，TypeScript 会警告你代码可能不会按预期执行。")]),s._v(" "),a("h5",{attrs:{id:"接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[s._v("#")]),s._v(" 接口")]),s._v(" "),a("p",[s._v("让我们开发这个示例应用。这里我们使用接口来描述一个拥有 firstName 和 lastName 字段的对象。 在 TypeScript 里，只在两个类型内部的结构兼容那么这两个类型就是兼容的。 这就允许我们在实现接口时候只要保证包含了接口要求的结构就可以，而不必明确地使用 implements 语句。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Person{\n    firstName:string;\n    lastName:string;\n}\nfunction greeter(person:Person){\n    return \"hello\"+ person.firstName + person.lastName;\n}\nlet user={firstName:'liu',lastName:'shuai'};\n\ndocument.body.textContent = greeter(user)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h5",{attrs:{id:"类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[s._v("#")]),s._v(" 类")]),s._v(" "),a("p",[s._v("最后，让我们使用类来改写这个例子。 TypeScript 支持 JavaScript 的新特性，比如支持基于类的面向对象编程。")]),s._v(" "),a("p",[s._v("让我们创建一个 Student 类，它带有一个构造函数和一些公共字段。 注意类和接口可以一起共作，程序员可以自行决定抽象的级别。")]),s._v(" "),a("p",[s._v("还要注意的是，在构造函数的参数上使用 public 等同于创建了同名的成员变量。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//创建一个Student的类,它带有一个构造函数和一些公共字段\n//在构造函数的参数上使用public等同于创建了同名的成员变量。\n\nclass Student{\n    fullName :String;\n    constructor(public firstName,public middleInitial,public lastName){\n        this.fullName = firstName + \"\" +middleInitial+\"\"+lastName;\n    }\n}\n\ninterface Person{\n    firstName;\n    lastName;\n}\n\nfunction greeter(person:Person){\n    return \"hello\" + person.firstName + person.lastName\n}\n\nconst user = new Student('liushuai','m.','User')\n\ndocument.body.textContent = greeter(user)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("重新运行 tsc greeter.ts，你会看到生成的 JavaScript 代码和原先的一样。 TypeScript 里的类只是 JavaScript 里常用的基于原型面向对象编程的简写。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//创建一个Student的类,它带有一个构造函数和一些公共字段\n//在构造函数的参数上使用public等同于创建了同名的成员变量。\nvar Student = /** @class */ (function () {\n    function Student(firstName, middleInitial, lastName) {\n        this.firstName = firstName;\n        this.middleInitial = middleInitial;\n        this.lastName = lastName;\n        this.fullName = firstName + \"\" + middleInitial + \"\" + lastName;\n    }\n    return Student;\n}());\nfunction greeter(person) {\n    return \"hello\" + person.firstName + person.lastName;\n}\nvar user = new Student('liushuai', 'm.', 'User');\ndocument.body.textContent = greeter(user);\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h2",{attrs:{id:"使用-vscode-编写-typescript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-vscode-编写-typescript"}},[s._v("#")]),s._v(" 使用 VSCode 编写 TypeScript")]),s._v(" "),a("h3",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.cnblogs.com/yasepix/p/9294491.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("VS Code 运行 TypeScript 操作指南(转)"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.jianshu.com/p/4f219f20af75",target:"_blank",rel:"noopener noreferrer"}},[s._v("vscode 下搭建 Typescript 编译环境"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000016305647",target:"_blank",rel:"noopener noreferrer"}},[s._v("使用 vscode 写 typescript（node.js 环境）起手式"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("VSCode 可以配置 TypeScript 的自动编译。")]),s._v(" "),a("p",[s._v("1.全局安装 typescript")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm i -g typescript\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("2.生成并配置 tsconfig.json")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("tsc --init\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("tsconfig.json 说明")]),s._v(" "),a("p",[s._v("官网所有配置选项"),a("a",{attrs:{href:"https://www.tslang.cn/docs/handbook/compiler-options.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("传送门"),a("OutboundLink")],1)]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('{//tsconfig.json文件内容\n// 指定需要编译的目录\n"include": ["src/**/*"],\n// 排除指定目录\n"exclude": ["node_modules"],\n// 编译选项配置\n"compilerOptions": {\n"outDir": "./output", // 输出目录\n"lib": ["dom","es5","es2015"], // 编译过程中需要引入的库文件的列表\n"module": "commonjs", // 采用的模块系统\n"moduleResolution": "node",\n"target": "es5", // 编译输出目标 ES 版本\n"strict": true, // 以严格模式解析\n"sourceMap": true, // 是否包含可以用于 debug 的 sourceMap\n"emitDecoratorMetadata": true, // 启用设计类型元数据（用于反射）\n"experimentalDecorators": true, // 启用装饰器\n"allowSyntheticDefaultImports": true, // 允许从没有设置默认导出的模块中默认导入\n"isolatedModules": false, // 将每个文件作为单独的模块\n"esModuleInterop": true, //导入语法 import foo from "foo"\n//【最佳实践】true打开的话对应我们要用任何的Library都需要.d.ts即使是空定义，放心可以下载。\n"noImplicitAny": false, // 在表达式和声明上有隐含的any类型时报错\n"noImplicitReturns": true, // 不是函数的所有返回路径都有返回值时报错。\n"importHelpers": true, // 从 tslib 导入外部帮助库: 比如__extends，__rest等\n"listFiles": true, // 编译过程中打印文件名\n"removeComments": true, // 移除注释\n"suppressImplicitAnyIndexErrors": true,\n"allowJs": true, // 允许编译javascript文件\n"pretty": true, // 给错误和消息设置样式，使用颜色和上下文\n\n"baseUrl": "./", // 解析非相对模块名的基准目录,相当于加了前缀\n// 指定特殊模块的路径\n"paths": {\n"jquery": [\n"node_modules/jquery/dist/jquery"\n]\n},\n\n// 每当编译器在某一rootDirs的子目录下发现了相对模块导入，它就会尝试从每一个rootDirs中导入。\n// 例如场景构建中的会将某些文件夹,输出拷贝到同一个目录下\n"rootDirs": [\n"src/views",\n"generated/templates/views"\n]\n\n}\n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br")])]),a("p",[s._v("3.监测文件改动并编译")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("tsc -w\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"ts-基础系列之-基本数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts-基础系列之-基本数据类型"}},[s._v("#")]),s._v(" TS 基础系列之-基本数据类型")]),s._v(" "),a("p",[s._v("每种语言都会有属于自己的数据类型，ts 的基本数据类型基本上是继承了 js，但也在基础之上增加了几个不一样的类型")]),s._v(" "),a("p",[s._v("1.布尔型 true／falses")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//在js中声明boolean型的方法和ts中的不同之处\nlet flag = true;\nlet flag: boolean = true;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("2.float,数值型（在 js 和 ts 中数字型都是 float）")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//在js中声明number型的方法和ts中的不同之处\nlet age = 26;\nlet age: number = 26;\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("3.字符型 Strings")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//在js中声明number型的方法和ts中的不同之处\nlet name = 'boren';\nlet name: string = 'boren';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("4.数组 Array")]),s._v(" "),a("p",[s._v("//在 js 中声明数组的方法和 ts 中的不同之处\n//1.js 中声明数组的两种方式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let city = [];\nlet city = new Array();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("//2.ts 中声明数组的两种方式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let city: string[] = [];\nlet city:Array<string> = []\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("//在 ts 中声明数组必须提前指定其数据类型，如果其数组中的元素其数据类型不相同，声明的方式会在后面介绍")]),s._v(" "),a("p",[s._v("5.元组 Tuple")]),s._v(" "),a("p",[s._v("元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 string 和 number 类型的元组。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//可以定义数组中元素不相同的数据类型\nlet people = ['boren',26];//js\nlet people:[string,number];\npeople = ['boren',26];//ts\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("6.枚举 Enum")]),s._v(" "),a("p",[s._v("enum 类型是对 JavaScript 标准数据类型的一个补充。 像 C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//js中没有此方法，都是以object或者json的形式去实现枚举的特性如：\nlet school = {\n\n     teacherOne : 'Mars',\n     teacherTwo:'yupeng',\n     teacherThree:'luxuesong'\n\n} \nconsole.log(school.teacherOne)//Mars\n\n在ECMA2015，简称es5中Object.getOwnPropertyDescriptor方法可以获取该属性的描述对象\nObject.getOwnPropertyDescriptor（school,‘teacherOne’）\n\n// {\n// value: Mars,\n// writable: true,\n// enumerable: true,\n// configurable: true\n// }\n\n其中这么方法打印出来的对象中key enumerable属性，为可枚举性，在js es5中有三个操作会忽略枚举为 false，for...in、 Object...keys()、 JSON.stringify()；在es6中新增一个方法Object.assign()会忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。关于更多js中对枚举属性的支持，在这里就不一一介绍，例如toString()和length等等其枚举属性为false\n//ts中枚举类型的用法\nenum classMember = {chenchao,rongbin,chenhua,liurui,luxuesong};\nlet teacher:classMember = classMember.luxuesong\n\n我们也可以给枚举中的成员进行编号等等，以便于更方便的去找到相应的对象元素\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[s._v("声明一个枚举类型")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Color {Red,Green,Blue}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("编译成 es5 代码是")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var Color;\n(function (Color) {\n    Color[Color["Red"] = 0] = "Red";\n    Color[Color["Green"] = 1] = "Green";\n    Color[Color["Blue"] = 2] = "Blue";\n})(Color || (Color = {}));\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("在声明的时候可以对索引进行赋值")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("enum Color {Red = 1,Green = 4,Blue};  //赋值操作：所赋值的值后面会按照赋值索引继续排列\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("获取枚举类型某个值的索引")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var c : Color = Color.Blue    //获取Blue的索引\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("7.通用数据类型 Any")]),s._v(" "),a("p",[s._v("当不知道变量的类型是什么的时候，就可以使用 any 类型")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var notArr : Array<any> = [1,'12',false]\n或\n\nlet list4:any[] = ['1',4,6,false]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("8.空值 Void")]),s._v(" "),a("p",[s._v("在 js 中我们其实对 void 不是那么的陌生，它被认为是一个操作符，这个操作符可以计算表达式但不会返回任何值，在 js 中常常出现的位置就是在 a 标签的链接中，我们不想让页面刷新，更不想链接到某些位置只是简简单单的 a 标签，有时候会调用一个简单的函数，仅此而已，那么我们就会")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<a href="javascript:void(0)" onclick="people()">点我</a>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在 ts 中，void 类型像是与 any 类型相反，它表示没有任何类型。Void 是对函数进行声明的,定义函数的时候，函数是要有返回值类型的，写了返回值类型如果不返回特定类型的值，就会报错。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function test1() : number{\n    \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码会报错，因为返回值类型为 number，没有返回。")]),s._v(" "),a("p",[s._v("使用 void 声明函数的返回值类型，表示不需要有返回值。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\nfunction test2() : void {\n    \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("9.Never")]),s._v(" "),a("p",[s._v("never 类型表示的是那些永不存在的值的类型。 例如， never 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 never 类型，当它们被永不为真的类型保护所约束时。")]),s._v(" "),a("p",[s._v("never 类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 never 的子类型或可以赋值给 never 类型（除了 never 本身之外）。 即使 any 也不可以赋值给 never。")]),s._v(" "),a("p",[s._v("下面是一些返回 never 类型的函数：")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('\n// 返回never的函数必须存在无法达到的终点\nfunction error(message: string): never {\n    throw new Error(message);\n}\n\n// 推断的返回值类型为never\nfunction fail() {\n    return error("Something failed");\n}\n\n// 返回never的函数必须存在无法达到的终点\nfunction infiniteLoop(): never {\n    while (true) {\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("10.类型断言")]),s._v(" "),a("p",[s._v("在 ts 中类型断言这种方式还是比较有用处的，其相当于 js 中的类型转换。但是只在编译的时候起作用。并不会改变其数据的本身结构。")]),s._v(" "),a("p",[s._v("两种写法")]),s._v(" "),a("p",[s._v("其一是“尖括号”语法：")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//类型断言第一种写法\n\nlet someValue :any = 'this is strings';\n\nlet strLength :number = (<string>someValue).length;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("另一个为 as 语法：")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let someValue :any = 'this is strings';\n\nlet strLength :number = (someValue as string).length;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在 TypeScript 里使用 JSX 时，只有 as 语法断言是被允许的。")]),s._v(" "),a("p",[s._v("###总结")]),s._v(" "),a("p",[s._v("通过以上的介绍相信对 ts 的数据类型已经有了大概的了解，其实相对于 js,ts 的数据类型并没有做什么变更，只是在声明其数据类型的时候必须明确的指定其相应的数据类型，否则代码编译会报错。虽然 ts 的文件是 xxx.ts 但由于编译过后和 js 没有什么大的不同点，能够很好的运行在浏览器端，其中 class、public 等等函数及模块编译过后的 js 能后让你更深入的了解 js")]),s._v(" "),a("p",[s._v("用 let 关键字来代替大家所熟悉的 JavaScript 关键字 var。 let 关键字是 JavaScript 的一个新概念，TypeScript 实现了它。 很多常见的问题都可以通过使用 let 来解决，所以尽可能地使用 let 来代替 var 吧。")]),s._v(" "),a("h2",{attrs:{id:"ts-基础系列之-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts-基础系列之-函数"}},[s._v("#")]),s._v(" TS 基础系列之-函数")]),s._v(" "),a("h3",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[s._v("#")]),s._v(" 介绍")]),s._v(" "),a("p",[s._v("函数是 JavaScript 应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块。 在 TypeScript 里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义 行为的地方。 TypeScript 为 JavaScript 函数添加了额外的功能，让我们可以更容易地使用。")]),s._v(" "),a("p",[s._v("1.函数的创建")]),s._v(" "),a("p",[s._v("在 ts 中函数创建也氛围两种匿名函数和有命名的函数")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//函数的创建\n//有名字的函数\nfunction people(x){\n    return x;\n}\n\n//匿名函数\nlet z=100;\nconst people1 =function(x){\n    return x+z;\n} \nconst result  = people1(1)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("2.函数的参数类型和返回值类型")]),s._v(" "),a("p",[s._v("⚠️只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正")]),s._v(" "),a("p",[s._v("⚠️设定了类型之后必须要返回相对应的类型，否则会报错")]),s._v(" "),a("p",[s._v("⚠️如果函数没有返回任何值，也必须指定返回值类型为 void 而不能留空")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//2.函数的参数类型和返回值类型\n\n/**\n * @param {*} x number\n * @param {*} y number\n * return number\n */\n\n const add = (x:number,y:number):number=>x+y\n\n const addResult  = add(1,1);\n\n //书写完整类型\nconst myadd :(baseValue:number,increment:number)=>number =(x:number,y:number):number=>x+y;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("3.函数的可选参数和默认参数")]),s._v(" "),a("p",[s._v("⚠️传递给一个函数的参数个数必须与函数期望的参数个数一致，否则会报错")]),s._v(" "),a("p",[s._v("⚠️可选参数用?argname 表示，必须跟在必须参数后面")]),s._v(" "),a("p",[s._v("⚠️没有传递参数或传递的值是 undefined，这种叫做默认初始化值的参数")]),s._v(" "),a("p",[s._v("⚠️所有必须参数后面的带默认初始化的参数都是可选的，调用时可省略")]),s._v(" "),a("p",[s._v("⚠️带默认值的参数如果出现在必须参数前面，用户必须明确的传入 undefined 值来获得默认值")]),s._v(" "),a("p",[s._v("⚠️当传入的参数个数不固定时，将所有参数收集到一个变量里和 js 中的 arguments 类似，剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个表达方式为（...）")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n//1.参数个数必须与函数期望的参数个数一致，否则会报错\n\nconst myadd :(baseValue:number,increment:number)=>number =(x:number,y:number):number=>x+y;\nmyadd(1)//报错\nmyadd(1,2)\nmyadd(1,2,3)//报错\n\n\n//2.可选参数用?argname表示，必须跟在必须参数后面\n\nconst buildName = (firstName:string,lastName?:string)=>firstName+lastName\n\nconsole.log(buildName('liu'))//liuundefined\nconsole.log(buildName('liu','shuai'))//liushuai\n\n\n//没有传递参数或传递的值是undefined，这种叫做默认初始化值的参数\n\nconst buildName1 = (firstName:string,lastName?:string)=>firstName+lastName\n\nconsole.log(buildName1('liu'))//liuundefined\nconsole.log(buildName1('liu',undefined))//liuundefined\n\n//所有必须参数后面的带默认初始化的参数都是可选的，调用时可省略\n\nconst buildName2 = (firstName:string,lastName='shuai')=>firstName+lastName\n\nconsole.log(buildName2('liu'))//liushuai\nconsole.log(buildName2('liu','shuai'))//liushuai\n\n//带默认值的参数如果出现在必须参数前面，用户必须明确的传入 undefined 值来获得默认值\n\nconst buildName3 = (lastName='shuai',firstName:string)=>firstName+lastName\n\nconsole.log(buildName3('shuai','liu'))//liushuai\nconsole.log(buildName3(undefined,'shuai'))//shuai shuai\n\n\n\n//当传入的参数个数不固定时，将所有参数收集到一个变量里和 js 中的 arguments 类似，剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个表达方式为（...）\n\nconst buildName4 = (firstName:string,...otherName:string[]):string=>firstName+otherName.join('')\n\nconsole.log(buildName4('liu'))//liu\nconsole.log(buildName4('shuai','age','24'))//shuaiage24\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br")])]),a("p",[s._v("4.函数的重载")]),s._v(" "),a("p",[s._v("重载允许一个函数接受不同数量或类型的参数时，作出不同的处理")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n// 我们来实现一下通过传入不同的 type 来实现函数的加操作和乘法操作并返回相应的类型\nconst compute = (type: number, ...resetData: number[]):number | string => {\n    if (type === 1 ) {\n      return resetData.reduce((a:number, b:number):number => a + b);\n    } else if (type === 2) {\n      return String(resetData.reduce((a:number, b:number):number => a * b));\n    }\n  } \n  console.log(compute(1, 3, 4, 5, 6)) // 18\n  console.log(compute(2, 3, 4, 5, 6)) // '360'\n  \n  // 通过上面的实现唯一的缺点就是不能明确通过type返回的相对应的计算的值和类型\n  \n  const compute1 = (type: number, ...resetData: number[]):number;\n  const compute2 = (type: number, ...resetData: number[]):string;\n  const compute3= (type: number, ...resetData: number[]):number | string => {\n    if (type === 1 ) {\n      return resetData.reduce((a:number, b:number):number => a + b);\n    } else if (type === 2) {\n      return String(resetData.reduce((a:number, b:number):number => a * b));\n    }\n  } \n  console.log(compute3(1, 3, 4, 5, 6)) // 18\n  console.log(compute3(2, 3, 4, 5, 6)) // '360'\n  \n  // 上例中，我们重复定义了多次函数 compute，前几次都是函数定义，最后一次是函数实现。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[s._v("5.this 和箭头函数（Lambads）")]),s._v(" "),a("p",[s._v("非常好的使用方式")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let MathName = {\n  person:['Mike','Joken','Amada'],\n  getName:function(){\n    return ()=>{\n      let index = Math.floor(Math.random()*3);\n      return {\n        n:this.preson[index]\n      }\n    }\n  }\n}\nlet myname = MathName.getName();\nalert(myname().n)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h2",{attrs:{id:"ts-基础系列之-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ts-基础系列之-类"}},[s._v("#")]),s._v(" TS 基础系列之-类")]),s._v(" "),a("h3",{attrs:{id:"声明一个-ts-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明一个-ts-类"}},[s._v("#")]),s._v(" 声明一个 ts 类")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Person{\n    //声明变量为公有变量\n    name:string;\n    age:number;\n    //构造函数参数遵循函数参数的书写形式\n    constructor(name:string,age:number){\n        this.name = name;\n        this.age = age;\n    }\n    say(){\n        return 'my name is ' + this.name + 'age is ' +this.age;\n    }\n}\nlet person = new Person('liushuai',24);\nconsole.log(person.say())\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h3",{attrs:{id:"类的继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类的继承"}},[s._v("#")]),s._v(" 类的继承")]),s._v(" "),a("p",[s._v("ts 中类的集成和 ES6 类似")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//继承\n\nclass Student extends Person{\n    school:string;\n    constructor(name:string,age:number,school:string){\n        super(name,age);\n        this.school = school;\n    }\n    study(){\n        console.log('good good study,day day up ')\n    }\n}\n\nlet student = new Student('liushuai',24,'🏫');\nconsole.log(student.say())\nconsole.log(student.school)\nstudent.study()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h3",{attrs:{id:"公共，私有与受保护的修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#公共，私有与受保护的修饰符"}},[s._v("#")]),s._v(" 公共，私有与受保护的修饰符")]),s._v(" "),a("p",[s._v("和大多数面向对象语言相同，TypeScript 也具有访问修饰符，TypeScript 的访问修饰符有两种：")]),s._v(" "),a("p",[s._v("1.public 公有的\n2.private 私有的")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\n\nclass Animal{\n    //默认为 public 共有的\n    public color:string;\n    //当成员被标记成 private时，它就不能在声明它的类的外部访问 私有的\n    private age:number;\n    //与 private修饰符的行为很相似，但有一点不同， protected成员在派生类中仍然可以访问 受保护的\n    protected name:string;\n    constructor(color:string,name:string,age:number){\n        this.color = color;\n        this.name = name;\n        this.age  =age;\n    }\n    //public 共有的\n    public sayColor(){\n        return this.color;\n    }\n    //它就不能在声明它的类的外部访问 私有的\n    private sayAge(){\n        console.log(this.age)\n    }\n    //受保护的成员方法，不能再类的外部直接访问\n    protected sayName(){\n        console.log(this.name)\n    }\n}\nlet animal = new Animal('red','dog',1)\nclass Snake extends Animal{\n    constructor(color:string,name:string,age:number){\n        super(color,name,age)\n    }\n    print(){\n        return this.color+this.name +this.age//age报错，父类得不到\n    }\n}\nlet snake  = new Snake('green','snake',2)\nconsole.log(snake）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("h3",{attrs:{id:"get、set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get、set"}},[s._v("#")]),s._v(" get、set")]),s._v(" "),a("p",[s._v("由上面访问修饰符知道，私有属性在外部是无法得到的，并且在子类中无法得到。所以就可以通过 set、get 来对私有属性进行修改和查看。")]),s._v(" "),a("p",[s._v("通过 set 和 get 来对 private 修饰的属性提供外部访问接口。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Hello {\n    private _name : string = 'hello';\n    private _age : number;\n    tell(){\n        return this.name;\n    }\n    get name() : string {\n        return this._name;\n    }\n    set name(newName : string){\n        this._name = newName;\n    }\n    get age() : number{\n        return this._age;\n    }\n    set age(newAge : number) {\n        if(newAge >=200 && newAge <0){\n            alert('请正确填写年龄')\n        }else{\n            this._age = newAge;\n        }\n    }\n}\nvar hello = new Hello();\nhello.name = 'hello';\nhello.age = 200;\nconsole.log(hello.age)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("h3",{attrs:{id:"static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static"}},[s._v("#")]),s._v(" static")]),s._v(" "),a("p",[s._v("使用 static 声明的属性和方法是静态的，编译成 es5 之后被挂载到构造函数上。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Person {\n    static name1 : string = 'Person';\n    tell(){\n        console.log('姓名:' + Person.name1);\n    }\n}\nconst p = new Person();\nconsole.log(p.tell());\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"抽象类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[s._v("#")]),s._v(" 抽象类")]),s._v(" "),a("p",[s._v("抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。 abstract 关键字是用于定义抽象类和在抽象类内部定义抽象方法。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("abstract class Demo{\n    constructor(public name:string){\n    }\n    printName():void{\n        console.log(this.name + 'name')\n    }\n    abstract fun1():void;// 必须在派生类中实现\n    abstract fun2():void;// 必须在派生类中实现\n\n}\nclass Demos extends Demo{\n    constructor(){\n        super('demo1') // 在派生类的构造函数中必须调用 super()\n    }\n    fun1():void{\n        console.log('类的实现')\n    }\n    fun2():void{\n        console.log('第二个类的实现')\n    }\n    fun3():void{\n        console.log('不是抽象类派生的')\n    }\n}\nlet demo:Demo;\n// let demo = new Demo()//报错不能创建一个抽象类的实例\n\nlet demos = new Demos(); // 允许对一个抽象子类进行实例化和赋值\ndemos.fun1()\n// demo.fun3()报错 方法在声明的抽象类中不存在\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("h2",{attrs:{id:"接口-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口-2"}},[s._v("#")]),s._v(" 接口")]),s._v(" "),a("h3",{attrs:{id:"初探接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初探接口"}},[s._v("#")]),s._v(" 初探接口")]),s._v(" "),a("p",[s._v("接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('interface LabelledValue {\n    label: string;\n}\n\nfunction printLabel(labelledObj: LabelledValue) {\n    console.log(labelledObj.label);\n}\n\nlet myObj = { size: 10, label: "Size 10 Object" };\nprintLabel(myObj);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"可选属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可选属性"}},[s._v("#")]),s._v(" 可选属性")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\ninterface SquareConfig{\n    color?:string;\n    size:number;\n}\nfunction creatSquare(config:SquareConfig):{color:string,area:number}{\n    let newSquare = {color: \"white\", area: 100};\n    if(config.color){\n        newSquare.color = config.color;\n    }\n    return newSquare;\n}\n\ncreatSquare({color:'red',size:11})\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h3",{attrs:{id:"函数类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数类型"}},[s._v("#")]),s._v(" 函数类型")]),s._v(" "),a("p",[s._v("函数参数类型统一定义，通过定义一个接口，来实现多个函数使用定制好的规则，而且并不会检查传入参数名是否一样，只会检查传入参数的类型。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 定义接口,并且每个数据类型\ninterface SearchFunc{\n    (source:string,substring:string):boolean;\n}\n\n//定义变量接受类型\n\nlet mysearch : SearchFunc;\n// 声明函数,传入的参数名不用和设置名称一样,只要传入的参数类型是一值即可\nmysearch = function(src:string,sub:string):boolean{\n    // 函数设置了指定返回值为布尔值\n    let results = src.search(sub)\n    return results>-1;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h3",{attrs:{id:"可索引的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可索引的类型"}},[s._v("#")]),s._v(" 可索引的类型")]),s._v(" "),a("p",[s._v("与使用接口描述函数类型差不多")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//可索引的类型\n\ninterface StringArray{\n    [index:number]:string;\n}\nlet myString :StringArray;\n// myString = [1,2,3] 报错\nmyString = ['red','blue','orange']\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"混合类型定义接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#混合类型定义接口"}},[s._v("#")]),s._v(" 混合类型定义接口")]),s._v(" "),a("p",[s._v("一个接口是可以继承多个接口的，\n变量名 = <接口名称>{} 这样变量就可以使用接口上面的属性，来定义赋值等")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 混合型 的接口定义\ninterface Counter {\n// 一个对象可以同时做为函数和对象使用，并带有额外的属性\n(start: number): string;\nreset(): void;\n// 为了方便演示继承分开写了,可以把所有定义值类型写在这一个里面\n\n}\ninterface Shape { interval: number; }\n\n// 一个接口继承多个接口 定义好的属性值\ninterface listCounter extends Counter, Shape{\nsideLength: number; // 里面还可以自己在加定义属性值\n}\n// 混合类型使用\nfunction getCounter(): listCounter {\n// 使用Counter声明好的接口,来定义函数\nlet counter = <listCounter>function (start: number) { };\ncounter.interval = 123;\ncounter.reset = function () { };\nreturn counter; // 返回函数体listCounter\n}\n\nlet c = getCounter();\nc(10); // 执行函数传入值\nc.reset(); // 执行里面附带的方法,虽然没写内容\nc.interval = 5.0; // 赋值\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("h2",{attrs:{id:"mixins"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mixins"}},[s._v("#")]),s._v(" Mixins")]),s._v(" "),a("p",[s._v("class Name implements 每个类名{} 把类当成了接口引入，但是要自己去实现接口")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//首先定义了两个类，它们将做为mixins\n//可以看到每个类都只定义了一个特定的行为或功能。 稍后我们使用它们来创建一个新类，同时具有这两种功能。\nclass Disposable{\n    isDisposable:boolean;\n    dispose(){\n        this.isDisposable = true;\n    }\n}\n\nclass ActiveAble{\n    isActiveable:boolean;\n    deactive(){\n        this.isActiveable =true;\n    }\n}\n\n//下面创建一个类，结合了这两个mixins;使用 implements\n\nclass SmartObject implements Disposable,ActiveAble{\n    //extends而是使用implements。 把类当成了接口，仅使用Disposable和Activatable的类型而非其实现。 \n    //这意味着我们需要在类里面实现接口。 但是这是我们在用mixin时想避免的\n\n    //提前定义一些占位属性\n    //Disposable\n    isDisposable:boolean = false;\n    dispose:()=>void;\n    //ActiveAble\n    isActiveable:boolean = false;\n    deactive:()=>void;\n   \n   \n}\n\n //最后，把mixins混入定义的类，完成全部实现部分\napplyMixins(SmartObject,[Disposable,ActiveAble])\n\nfunction applyMixins(der:any,base:any[]){\n    base.forEach(baseitem=>{\n        Object.getOwnPropertyNames(baseitem.prototype).forEach(name=>{\n            der.prototype[name] = baseitem.prototype[name]\n        })\n    })\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br")])]),a("h2",{attrs:{id:"泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[s._v("#")]),s._v(" 泛型")]),s._v(" "),a("h3",{attrs:{id:"认识泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#认识泛型"}},[s._v("#")]),s._v(" 认识泛型")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//首先写一个函数会返回任何传入它的number。\n\n// function helloNum (arg:number):number{\n//     return arg;\n// }\n\n//需求又改为 函数会返回任何传入它的值，第一反应应该是想到any\n\n// function helloNum (arg:any):any{\n//     return arg;\n// }\n\n//但是问题有了他没有明显的规范，容易出现转换错误\n\n//那么9⃣就的使用泛型  泛型需要 <T>\n\nfunction helloNum <T>( arg:T):T{\n    return arg;\n}\n//使用的好处,需要什么类型指定什么类型\n\nlet helloNumString = helloNum<string>('hello Mike')\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h3",{attrs:{id:"应用泛型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用泛型"}},[s._v("#")]),s._v(" 应用泛型")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//泛型的应用\n\n//泛型不一定<>里非得写<T>;可以随意写入大写<K>;通常是用<T>\n\nfunction helloStr<T>(arg:T):T{\n    //console.log(arg.length)//这里会报错\n    return arg;\n}\n\n//而我们这么写\n\nfunction helloArr<T>(args:T[]):T[]{\n\n    console.log(args.length)//这里不会报错\n    return args;\n}\n\n//总结泛型会根据你传递的类型而决定他会具有哪些属性\nlet list:Array<string>=helloArr<string>(['1','2','3'])\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h3",{attrs:{id:"泛型类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型类型"}},[s._v("#")]),s._v(" 泛型类型")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//泛型类型\n\nfunction helloDemo<T>(arg:T):T{\n    return arg;\n}\n\nlet myHelloDemo:<K>(arg:K)=>K = helloDemo;\n//或者\nlet myHelloDemo1:{<T>(arg:T):T} = helloDemo;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"泛型类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#泛型类"}},[s._v("#")]),s._v(" 泛型类")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//泛型类\nclass  HelloNumber<T>{\n    Ten:T;\n    add:(x:T,y:T)=>T;\n}\n\nvar myHelloNumber = new HelloNumber<number>();\nmyHelloNumber.Ten = 10;\n\nmyHelloNumber.add = function(x,y){\n    return x+y;\n}\nalert(myHelloNumber.Ten)\nalert(\n    myHelloNumber.add(10,10))\n    \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"module-模式和-namespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module-模式和-namespace"}},[s._v("#")]),s._v(" Module 模式和 namespace")]),s._v(" "),a("p",[s._v("Module 模式：1 模块话，可重用 2.封装变量与函数")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface StringValidator{\n isAcceptable(s : string) : boolean;\n}\nlet lettersRegexp = (str) => /^[A-Za-z]+$/.test(str);\nlet numberRegexp = (str) => /^[0-9]+$/.test(str);\nclass LetterOnlyValidator implements StringValidator{\n \nisAcceptable(s : string) : boolean{\n    return lettersRegexp(s);\n}\n}\nclass ZipCodeValidor implements StringValidator{\n isAcceptable(s:string):boolean{\n     return s.length == 5 && numberRegexp(s);\n }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("每一次使用在这里都需要调用。")]),s._v(" "),a("p",[s._v("TypeScript 中早期使用 module 来作为模块化。")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//module.ts\nexport module Validation{\n     export interface StringValidator{\n         isAcceptable(s : string) : boolean;\n     }\n     let lettersRegexp = (str) => /^[A-Za-z]+$/.test(str);\n     let numberRegexp = (str) => /^[0-9]+$/.test(str);\n     export class LetterOnlyValidator implements StringValidator{\n         isAcceptable(s : string):boolean {\n             return lettersRegexp(s);\n         }\n     }\n     export class ZipCodeValidor implements StringValidator{\n         isAcceptable(s : string) : boolean{\n             return numberRegexp(s);\n         }\n     }\n }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("由于 1.5 版本的更新和 ES6 的出现，把 module 改成了 namespace")]),s._v(" "),a("div",{staticClass:"language-plain line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("namespace Validation{\n    export interface StringValidator{\n        isAcceptable(s : string) : boolean;\n    }\n    const lettersRegexp = (str) => /^[A-Za-z]+$/.test(str);\n    const numberRegexp = (str) => /^[0-9]+$/.test(str);\n    export class LettersOnlyValidator implements StringValidator{\n        isAcceptable(s : string) : boolean {\n            return lettersRegexp(s);\n        }\n    }\n    export class ZipCodeValidator implements StringValidator{\n        isAcceptable(s : string) :boolean {\n            return numberRegexp(s);\n        }\n  \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);