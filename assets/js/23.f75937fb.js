(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{227:function(s,a,t){"use strict";t.r(a);var e=t(0),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"react-入门必学【上】"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-入门必学【上】"}},[s._v("#")]),s._v(" React 入门必学【上】")]),s._v(" "),t("h2",{attrs:{id:"什么是-react"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-react"}},[s._v("#")]),s._v(" 什么是 React")]),s._v(" "),t("p",[s._v("React 是 Facebook 开发的一款用来构建用户界面的 js 库，对于 react 来讲还可以应用到 nodejs，做同构化应用。 对于 React 自己来说，React 只做的是非常纯粹的 View 层。React 结合自己庞大的组件库，形成了 MVVM 框架。")]),s._v(" "),t("p",[s._v("React Native 版本，可以用一套程序写 IOS、安卓各种客户端。")]),s._v(" "),t("h2",{attrs:{id:"react-特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-特性"}},[s._v("#")]),s._v(" React 特性")]),s._v(" "),t("h3",{attrs:{id:"virtual-dom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#virtual-dom"}},[s._v("#")]),s._v(" Virtual DOM")]),s._v(" "),t("p",[s._v("Virtual DOM 是一个模拟 DOM 树的 JavaScript 对象。React 使用 Virtual DOM 来渲染 UI，同时监听 Virtual DOM 上数据的变化，并自动迁移到 UI 上。")]),s._v(" "),t("h3",{attrs:{id:"state"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#state"}},[s._v("#")]),s._v(" state")]),s._v(" "),t("p",[s._v("React 有一个叫做 state 的概念。state 是状态，整个 React 都是通过状态来驱动的，只要状态变换，React 就会驱动 View 变化，View 变化就会启动 VirtualDOM 的 diff 算法，通过 diff 算法找到 DOM 元素最小的变化，从而实现最小的操作 DOM 元素。")]),s._v(" "),t("h3",{attrs:{id:"props"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#props"}},[s._v("#")]),s._v(" props")]),s._v(" "),t("p",[s._v("props 是 React 中的属性，通过属性可以做到父子组件间的通信。")]),s._v(" "),t("h3",{attrs:{id:"jsx-语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jsx-语法"}},[s._v("#")]),s._v(" JSX 语法")]),s._v(" "),t("p",[s._v("JSX 语法是 React 定义的一种 JavaScript 语法扩展，类似于 XML。jSX 是可选的，在开发过程中也可以不使用 JSX，使用 JavaScript 来编写 React 应用(建议使用)。")]),s._v(" "),t("h3",{attrs:{id:"components"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#components"}},[s._v("#")]),s._v(" components")]),s._v(" "),t("p",[s._v("React 是专注于 View 层开发的，View 是基于组件的，每一个 JSX 是一个组件。组件化开发可以创建可复用的 UI 组件，提高开发效率。")]),s._v(" "),t("h2",{attrs:{id:"组件-props-元素渲染"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件-props-元素渲染"}},[s._v("#")]),s._v(" 组件 & Props & 元素渲染")]),s._v(" "),t("p",[s._v("组件可以将 UI 切分成一些独立的、可复用的部件，这样你就只需专注于构建每一个单独的部件。")]),s._v(" "),t("p",[s._v("组件从概念上看就像是函数，它可以接收任意的输入值（称之为“props”），并返回一个需要在页面上展示的 React 元素。")]),s._v(" "),t("h2",{attrs:{id:"react-jsx-语法学习"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-jsx-语法学习"}},[s._v("#")]),s._v(" React JSX 语法学习")]),s._v(" "),t("h3",{attrs:{id:"jsx-语法的介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jsx-语法的介绍"}},[s._v("#")]),s._v(" JSX 语法的介绍")]),s._v(" "),t("p",[s._v("JSX(JavaScript XML) 是基于 ECMAScript 的一种新特性一种定义带属性树结构的语法。它不是 XML 或者 HTML 的一种限制，可以说是对它们的一种。")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/introducing-jsx.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("官网"),t("OutboundLink")],1)]),s._v(" "),t("h3",{attrs:{id:"jsx-语法的书写方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jsx-语法的书写方式"}},[s._v("#")]),s._v(" JSX 语法的书写方式")]),s._v(" "),t("p",[s._v("JSX 语法有两种书写方式：一种是 ES5 的书写方式(现在不适用,还是要记一下吧，以免以后忘了)，一种是 ES6 的书写方式。")]),s._v(" "),t("h4",{attrs:{id:"es5-的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es5-的方式"}},[s._v("#")]),s._v(" ES5 的方式")]),s._v(" "),t("p",[s._v("ES5 使用 React.crateClass 的方式来构建组件。")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("var Hello = React.createClass({\n    render : function(){\n        return <h1> {this.props.name}</h1>\n    }\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"es6-的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es6-的方式"}},[s._v("#")]),s._v(" ES6 的方式")]),s._v(" "),t("p",[s._v("ES6 采用新版本的 Class 来构建组件")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('"use strict";\nclass Hello extends React.Component{\n    render(){\n        return <h1>Hello</h1>\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("上面了两种方式生成出来的叫组件，对应的 Hello 叫做组件名，简单理解就是 HTML 标签。但是要怎么注册这两个组件呢？上面两种方式的注册组件的方式相同。")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ReactDOM.render(\n    <Hello name=\"ESMA\" />,\n    document.getElementById('app')\n)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("使用 ReactDOM.render 把我们的组件传进去，然后再传一个 DOM 节点，相当于把组件里面的东西渲染到 id 为 app 的 DOM 元素里面。")]),s._v(" "),t("p",[s._v("这里传进去了 name 属性，在组件里面通过使用 this.props.name 获取。this.props 相当于 attribute。用于获取书写在组件标签中的属性。")]),s._v(" "),t("h3",{attrs:{id:"jsx-注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jsx-注意事项"}},[s._v("#")]),s._v(" JSX 注意事项")]),s._v(" "),t("p",[s._v("1.React 的 JSX 里约定分别使用首字母大、小写来区分本地组件的类和 HTML 标签。并使用驼峰命令。")]),s._v(" "),t("p",[s._v("自定义组件：List，HTML 标签：html、htmlMessage")]),s._v(" "),t("p",[s._v("2.要使用 JavaScript 表达式作为属性值，只需要把这个表达式用一对大括号（{}）包起来，如果直接写值是需要用包起来。不需要用引号（“”）")]),s._v(" "),t("p",[s._v("如果需要写多行就需要写在()里面，多行书写 JSX 语法，只能有一个跟标签。 例如：")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("return(<div>\n          <span></span>  \n        </div>)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("3.htmlFor 和 className")]),s._v(" "),t("p",[s._v("在 html 中 label 使用 for 属性、JSX 中使用 htmlFor，html 中 css 类使用 class，JSX 中使用 className")]),s._v(" "),t("p",[s._v("4.CSS in JS （React style)")]),s._v(" "),t("p",[s._v("JSX 允许在 js 中书写 css，相当于 js 中的一个对象")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const style = {\n     color:'red',\n     fontSize : 38,\n }\n <div style={style}> <div/>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("5.JSX 里需要加注释很容易，他们只是 js 表达式而已。只需要在一个标签的子节点内(非最外层)小心的用{}包围要注释的范围，在 JSX 中写注释和平常是有一些区别。")]),s._v(" "),t("p",[s._v("{/* 注释内容*/}")]),s._v(" "),t("p",[s._v("6.事件绑定")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("handleChange(e){\n         console.log(e.target)\n     }\n     render(){\n         return (<input onClick = {this.handleChange.bind(this)}/>)  //需要改变this    \n     }\n        \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h2",{attrs:{id:"dom-diff"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dom-diff"}},[s._v("#")]),s._v(" DOM diff")]),s._v(" "),t("p",[s._v("DOM diff 是 DOM 比较算法。用于找到最小变化的 DOM 元素进行渲染，平行化比较，把重绘和重排做到最小化。")]),s._v(" "),t("p",[s._v("react 中 View 层的变化是基于 state 的，如果状态发生变化，组件中 render 函数就会重新执行。")]),s._v(" "),t("h3",{attrs:{id:"流程图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#流程图"}},[s._v("#")]),s._v(" 流程图")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://wendaoshuai66.github.io/study/note/images/domedif%E6%B5%81%E7%A8%8B%E5%9B%BE.png",alt:""}})]),s._v(" "),t("h3",{attrs:{id:"dom-diff-算法流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dom-diff-算法流程"}},[s._v("#")]),s._v(" DOM diff 算法流程")]),s._v(" "),t("p",[s._v("1.开始判断节点是否相同，如果节点不相同，就相当于修改了节点，React 重新创建一个节点；")]),s._v(" "),t("p",[s._v("2.如果节点相同，判断是否是自定义节点；")]),s._v(" "),t("p",[s._v("3.如果不是自定义节点(ReactDOM.render 也可以渲染 html 标签)，比较属性是否发生变化，如果属性变更新属性然后结束；")]),s._v(" "),t("p",[s._v("4.如果是自定义节点，或者说是我们自己写的组件，然后重新渲染，会渲染出一段 VirtualDOM（虚拟 DOM）,然后和以存在的 Virtual DOM 进行比较区别，最终渲染到页面。")]),s._v(" "),t("h2",{attrs:{id:"非-dom-属性的介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#非-dom-属性的介绍"}},[s._v("#")]),s._v(" 非 DOM 属性的介绍")]),s._v(" "),t("h3",{attrs:{id:"dangerouslysetinnerhtml-警告"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dangerouslysetinnerhtml-警告"}},[s._v("#")]),s._v(" dangerouslySetInnerHTML 警告")]),s._v(" "),t("p",[s._v("dangerouslySetInnerHTML 用于净化数据，预防 XSS 的攻击")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('let rawHTML = {\n    //通过__html来构造出来，\n    __html: "<h2>非dom属性：dangerouslySetInnerHTML标签</h2>"\n}\n\n <div dangerouslySetInnerHTML={rawHTML}>\n\n </div>\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"ref"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ref"}},[s._v("#")]),s._v(" ref")]),s._v(" "),t("p",[s._v("如果在 JSX 中获取真正的 DOM 元素，可以使用 ref 这个属性。")]),s._v(" "),t("p",[s._v("在 html 元素中添加 ref 属性")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("<input type=\"text\" ref= 'input'/>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果想要取得这个 DOM 元素可以通过 ReactDOM.findDOMNode()来获取,并且需要在 React 生命周期的 componentDidMount 阶段")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ReactDOM.findDOMNode(this.refs.input)   //获取到input元素\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"key-提高渲染的性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#key-提高渲染的性能"}},[s._v("#")]),s._v(" key 提高渲染的性能")]),s._v(" "),t("p",[s._v("key 帮助 React 识别哪些项目已更改，已添加或已删除。应该为数组内部的元素赋予键，以使元素具有稳定的标识：key 必须在唯一的")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const numbers = [1, 2, 3, 4, 5];\nconst listItems = numbers.map((number) =>\n  <li key={number.toString()}>\n    {number}\n  </li>\n);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[t("a",{attrs:{href:"https://reactjs.org/docs/lists-and-keys.html#keys",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考官网"),t("OutboundLink")],1)]),s._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/1",target:"_blank",rel:"noopener noreferrer"}},[s._v("关于 key 讨论"),t("OutboundLink")],1)]),s._v(" "),t("p",[s._v("注意：另外有个方式：推荐使用"),t("a",{attrs:{href:"https://github.com/dylang/shortid",target:"_blank",rel:"noopener noreferrer"}},[s._v("shortid"),t("OutboundLink")],1),s._v("生成唯一 key 的数组，和数据数组一起使用，省去提交数据时再重组数组。")]),s._v(" "),t("p",[s._v("案例：")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import React from 'react';\nimport shortid from 'shortid';\n\nclass Demo extends React.Component {\n    constructor(props) {\n    super(props);\n    this.state = {\n      data: ['a', 'b', 'c']\n    }\n    this.dataKeys = this.state.data.map(v => shortid.generate());\n  }\n  \n    deleteOne = index => { // 删除操作\n        const { data } = this.state;\n        this.setState({ data: data.filter((v, i) => i !== index) });\n        this.dataKyes.splice(index, 1);\n    }\n    \n    render() {\n      return (\n          <ul>\n               {\n                   data.map((v, i) => \n                    <li \n                        onClick={i => this.deleteOne(i)}  \n                        key={this.dataKeys[i]}\n                    >\n                        {v}\n                    </li>\n                    )\n               } \n            </ul>\n      )\n  }\n}\n// 稍微抽取，可以封装一个通用的组件复制代码\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br")])]),t("h2",{attrs:{id:"react-props-and-state"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-props-and-state"}},[s._v("#")]),s._v(" React props and state")]),s._v(" "),t("h3",{attrs:{id:"props-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#props-2"}},[s._v("#")]),s._v(" Props")]),s._v(" "),t("p",[s._v("Props(properties)：属性，一个事物性质与关系，可以说组件是 React 的核心了，如果把组件比喻成一个管道，那么 props 就相当于输入。")]),s._v(" "),t("p",[s._v("props 可以定义在注册\n件的地方，也可以在组件内部定义默认属性，无论在哪里定义，props 都是只读的。")]),s._v(" "),t("p",[s._v("props 可以应用于 JSX 中 html 的元素上，自定义组件的元素上(相当于给子组件传值)，也可以应用于值。")]),s._v(" "),t("h3",{attrs:{id:"定义默认-props"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义默认-props"}},[s._v("#")]),s._v(" 定义默认 props")]),s._v(" "),t("p",[s._v("ES5 和 ES6 定义默认的 props 是不相同的。")]),s._v(" "),t("p",[s._v("ES5")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("var Hello = React.createClass({\n    getDefaultProps : function(){   //设置默认属性\n         return { title : '133'};\n    }\n    propTypes : { //属性校验器，表示必须是string\n        title : React.PropTypes.string,\n    }  \n}) \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("上面使用 getDefauktProps 定义属性，propTypes 用于属性的类型检查。")]),s._v(" "),t("p",[s._v("ES6")]),s._v(" "),t("p",[s._v("ES6 同样有两种方法，由于 ES6 是使用 class 类来定义组件的，因此，这两种方法必须是静态。")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('\nexport default class Hello extends React.Component{\n    static defaultProps ={\n        title : "Hello React",\n    }\n    static propTypes = {\n        title : React.PropTypes.string,\n    }\n}\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("运行上面代码会发现报错。报错原因在 React.PropTypes.string，这是因为在 React15.5 之前类型检查是集成在 React 里面的，React15.5 之后被抽离了出来。所以需要下载 prop-types 包来解决这个问题。")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("npm install prop-types –save\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("再修改一下代码。")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('import propTypes from "prop-types";\nexport default class Hello extends React.Component{\n    static defaultProps ={\n        title : "Hello React",\n    }\n    static propTypes = {\n        title :propTypes.string,\n    }\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("这时候运行就不会报错了。")]),s._v(" "),t("h3",{attrs:{id:"state-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#state-2"}},[s._v("#")]),s._v(" state")]),s._v(" "),t("p",[s._v("state 在 React 中是状态，是组件自身所拥有的东西，并且可以自己设置和改变。")]),s._v(" "),t("p",[s._v("在开发过程中的状态都是我们自己来维护的，比如说发一个请求，请求发送成功会怎么样、失败会怎么样等等。")]),s._v(" "),t("p",[s._v("React 是基于状态的，就是在代码中定义了状态，只要在任何地方改变了状态，最初定义状态的地方就会发生改变。")]),s._v(" "),t("h3",{attrs:{id:"setstate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#setstate"}},[s._v("#")]),s._v(" setState")]),s._v(" "),t("p",[s._v("React 如果想改变一个状态，那么必须通过 setState 切换撞他，每一次 setState 之后，Reader 就会重新渲染执行一次 render，就会触发 diff 算法进行计算，通过计算生出新的 Virtual Dom 和现在的 Virtual DOM 进行比较，发生变化之后执行一次更新。")]),s._v(" "),t("h3",{attrs:{id:"使用-state"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用-state"}},[s._v("#")]),s._v(" 使用 state")]),s._v(" "),t("p",[s._v("state 在 ES5 和 ES6 上都是不同的。")]),s._v(" "),t("p",[s._v("ES5")]),s._v(" "),t("p",[s._v("通过 getInitialState 方法来初始化状态。")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("var Hello = React.crateClass({\n    getInitialState : function(){\n        return {\n            isloading : false,\n        }\n    }\n})\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("ES6")]),s._v(" "),t("div",{staticClass:"language-plain line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("export default class Hello extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            isloading : false,\n        }\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("上面两种方式同样是通过 this.setState()改变状态。")]),s._v(" "),t("p",[s._v("以 ES6 为例")]),s._v(" "),t("h3",{attrs:{id:"props-和-state-的比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#props-和-state-的比较"}},[s._v("#")]),s._v(" Props 和 State 的比较")]),s._v(" "),t("p",[s._v("相同点")]),s._v(" "),t("p",[s._v("1.都是纯的 JS 对象，都包含这一些信息。")]),s._v(" "),t("p",[s._v("2.都会触发 render 更新；属性是开始渲染一次性触发 render，状态是每次状态改变都会触发 render")]),s._v(" "),t("p",[s._v("3.都具有确定性，渲染前初始化完成")]),s._v(" "),t("p",[s._v("区别")]),s._v(" "),t("p",[s._v("属性只传递一次，状态是不停的在更新。组件在运行时需要修改的就是状态，属性在组件内运行时是修改不了的。")]),s._v(" "),t("p",[s._v("比较")]),s._v(" "),t("table",[t("th",[t("td",[s._v(" Props\t")]),s._v(" "),t("td",[s._v(" State ")])]),s._v(" "),t("tr",[t("td",[s._v("能否从父组件获取初始值？")]),s._v(" "),t("td",[s._v(" 能 ")]),s._v(" "),t("td",[s._v(" 不能")])]),s._v(" "),t("tr",[t("td",[s._v("能否由父组件修改？")]),s._v(" "),t("td",[s._v(" 能 ")]),s._v(" "),t("td",[s._v(" 不能")])]),s._v(" "),t("tr",[t("td",[s._v("能否在组件内部设置默认值？")]),s._v(" "),t("td",[s._v(" 能 ")]),s._v(" "),t("td",[s._v(" 能")])]),s._v(" "),t("tr",[t("td",[s._v("能否在组件内部修改？")]),s._v(" "),t("td",[s._v(" 不能 ")]),s._v(" "),t("td",[s._v(" 能")])]),s._v(" "),t("tr",[t("td",[s._v("能否设置子组件的初始值？")]),s._v(" "),t("td",[s._v(" 能 ")]),s._v(" "),t("td",[s._v(" 不能")])]),s._v(" "),t("tr",[t("td",[s._v("能否修改子组件的值？ ？")]),s._v(" "),t("td",[s._v(" 能 ")]),s._v(" "),t("td",[s._v(" 不能")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);