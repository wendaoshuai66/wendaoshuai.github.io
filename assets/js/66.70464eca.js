(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{351:function(n,s,a){"use strict";a.r(s);var r=a(10),e=Object(r.a)({},(function(){var n=this,s=n._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"前端中的数据结构-排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端中的数据结构-排序"}},[n._v("#")]),n._v(" 前端中的数据结构-排序")]),n._v(" "),s("h2",{attrs:{id:"_99-乘法表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_99-乘法表"}},[n._v("#")]),n._v(" 99 乘法表")]),n._v(" "),s("p",[n._v("在写排序之前，先写一个 99 乘法表")]),n._v(" "),s("div",{staticClass:"language-plain line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[n._v('document.write(`99乘法表`)\ndocument.write(`<table>`)\nfor (let i = 1; i < 10; i++) {\n    document.write(`<tr>`)\n    for (let j = 1; j <= i; j++) {\n        document.write(`<td style="padding:5px">\n        ${i} * ${j} = ${i * j}\n        </td>`)\n    }\n    document.write(`</tr>`)\n}\ndocument.write(`</table>`)\n')])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("h2",{attrs:{id:"冒泡排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#冒泡排序"}},[n._v("#")]),n._v(" 冒泡排序")]),n._v(" "),s("p",[n._v("它是最慢的排序算法之一，数据值就会像气泡一样从数组的一端漂浮到另一端")]),n._v(" "),s("div",{staticClass:"language-plain line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[n._v("let arr = [2, 1, 7, 3, 5]\n\nfunction bubbleSort(arr) {\n    for (let outer = 0, len = arr.length; outer < len; outer++) {\n        for (let inner = 0, len = arr.length - outer; inner < len; inner++) {\n            if (arr[inner + 1] < arr[inner]) {\n                [arr[inner], arr[inner + 1]] = [arr[inner + 1], arr[inner]]\n            }\n        }\n    }\n    return arr;\n}\n\nconsole.log(bubbleSort(arr))\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br")])]),s("h2",{attrs:{id:"选择排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选择排序"}},[n._v("#")]),n._v(" 选择排序")]),n._v(" "),s("p",[n._v("实现思路：从数组的开头开始，将第一个元素同其他数组元素进行对比，较最小的元素会被放到数组的第一个位置，再从第二个位置继续。")]),n._v(" "),s("div",{staticClass:"language-plain line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[n._v("let arr = [3, 1, 55, 6, 9, 2, 8, 10]\n\nfunction selectSort(arr) {\n    for (let outer = 0; outer < arr.length - 1; outer++) {\n        for (let inner = outer + 1; inner < arr.length; inner++) {\n            if (arr[outer] > arr[inner]) {\n                [arr[outer], arr[inner]] = [arr[inner], arr[outer]];\n            }\n        }\n    }\n    return arr;\n}\nconsole.log(selectSort(arr))\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br")])]),s("h2",{attrs:{id:"插入排序就像打牌一样"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入排序就像打牌一样"}},[n._v("#")]),n._v(" 插入排序就像打牌一样")]),n._v(" "),s("p",[n._v("插入排序是稳定的排序，处理小规模数据或者基本有序数据时，十分高效")]),n._v(" "),s("div",{staticClass:"language-plain line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[n._v(" function insertSort(arr) {\n    for (let outer = 1; outer < arr.length; outer++) {\n        for (let inner = outer; inner > 0 && arr[inner] < arr[inner - 1]; inner--) {\n            [arr[inner], arr[inner - 1]] = [arr[inner - 1], arr[inner]]\n        }\n    }\n    return arr;\n}\nvar arr = [7, 3, 8, 4, 9, 11];\nconsole.log(insertSort(arr))\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br")])]),s("p",[n._v("while 实现😢")]),n._v(" "),s("div",{staticClass:"language-plain line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[n._v(" function insert(arr) {\n    for (let outer = 1; outer < arr.length; outer++) {\n        let inner = outer;\n        while (inner > 0 && arr[inner] < arr[inner - 1]) {\n            [arr[inner], arr[inner - 1]] = [arr[inner - 1], arr[inner]]\n            inner--;\n        }\n    }\n    return arr;\n}\nvar arr = [7, 3, 8, 4, 9, 11];\nconsole.log(insert(arr))\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br")])]),s("h2",{attrs:{id:"快速排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速排序"}},[n._v("#")]),n._v(" 快速排序")]),n._v(" "),s("p",[n._v("在列表中选择一个元素作为基准值，排序围绕这个基准值进行，将列表中小于基准值的放入数组底部大于放顶部。")]),n._v(" "),s("div",{staticClass:"language-plain line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[n._v("function quickSort(arr) {\n    if (arr.length === 0) {\n        return []\n    }\n    let base = arr[0],\n        less = [],\n        big = [];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > base) {\n            big.push(arr[i])\n        } else {\n            less.push(arr[i])\n        }\n    }\n    return quickSort(less).concat(base, quickSort(big))\n}\nvar arr = [7, 3, 8, 4, 9, 11];\nconsole.log(quickSort(arr))\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br")])]),s("h2",{attrs:{id:"希尔排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#希尔排序"}},[n._v("#")]),n._v(" 希尔排序")]),n._v(" "),s("p",[n._v("它会首先比较较远的元素而非相邻的元素。让元素尽快回到正确的位置。通过定义一个间隔序列来表示在排序过程中进行比较的元素间。公开的间隔序列是 701，301，132，57，23，10，4，1.(质数)。")]),n._v(" "),s("div",{staticClass:"language-plain line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[n._v("function shellSort(array) {\n    // 定义间隔序列，这里写死了，可以动态定义\n    const gaps = [5, 3, 1];\n    for (let index = 0; index < gaps.length; index++) {\n        const gap = gaps[index];\n\n        for (let outer = gap; outer < array.length; outer++) {\n            // 检查的数字\n            const temp = array[outer];\n            for (\n                let inner = outer - gap;\n                // 如果比之前的 gap 小，就交换一下，直到交换到第一个 gap 处\n                inner >= 0 && array[inner] > temp; inner -= gap\n            ) {\n                [array[inner], array[inner + gap]] = [array[inner + gap], array[inner]]\n                swap(array, inner, inner + gap);\n            }\n        }\n    }\n    return array;\n}\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br")])]),s("h2",{attrs:{id:"归并排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#归并排序"}},[n._v("#")]),n._v(" 归并排序")]),n._v(" "),s("p",[n._v("把一系列排好序的子序列合并成一个大的完整有序序列。")]),n._v(" "),s("div",{staticClass:"language-plain line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-plain"}},[s("code",[n._v("// 归并排序算法\nfunction mergeSort(array) {\n  // 避免污染传入的数组\n  const temp = [...array];\n  splitArray(temp, 0, array.length - 1);\n  return temp;\n}\n\n// 将大数组拆分成两个小数组\nfunction splitArray(array, start, end) {\n  if (start < end) {\n    const mid = Math.floor((start + end) / 2);\n    splitArray(array, 0, mid);\n    splitArray(array, mid + 1, end);\n    mergeArray(array, start, mid, end);\n  }\n}\n\n// 合并两个排序好的数组\nfunction mergeArray(array, start, mid, end) {\n  var i = start;\n  var j = mid + 1;\n  var k = 0;\n  var temp = [];\n  while (i <= mid && j <= end) {\n    if (array[i] <= array[j]) {\n      temp[k] = array[i];\n      i++;\n    } else {\n      temp[k] = array[j];\n      j++;\n    }\n    k++;\n  }\n\n  while (i <= mid) {\n    temp[k] = array[i];\n    i++;\n    k++;\n  }\n\n  while (j <= end) {\n    temp[k] = array[j];\n    j++;\n    k++;\n  }\n\n  for (let index = 0; index < k; index++) {\n    array[index + start] = temp[index];\n  }\n}\nvar arr = [2, 3, 7, 9, 8, 5, 4, 6, 1];\nconsole.log('原始数组：', arr);\nconst result = mergeSort(arr);\nconsole.log('排列后数组：', result);\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br"),s("span",{staticClass:"line-number"},[n._v("22")]),s("br"),s("span",{staticClass:"line-number"},[n._v("23")]),s("br"),s("span",{staticClass:"line-number"},[n._v("24")]),s("br"),s("span",{staticClass:"line-number"},[n._v("25")]),s("br"),s("span",{staticClass:"line-number"},[n._v("26")]),s("br"),s("span",{staticClass:"line-number"},[n._v("27")]),s("br"),s("span",{staticClass:"line-number"},[n._v("28")]),s("br"),s("span",{staticClass:"line-number"},[n._v("29")]),s("br"),s("span",{staticClass:"line-number"},[n._v("30")]),s("br"),s("span",{staticClass:"line-number"},[n._v("31")]),s("br"),s("span",{staticClass:"line-number"},[n._v("32")]),s("br"),s("span",{staticClass:"line-number"},[n._v("33")]),s("br"),s("span",{staticClass:"line-number"},[n._v("34")]),s("br"),s("span",{staticClass:"line-number"},[n._v("35")]),s("br"),s("span",{staticClass:"line-number"},[n._v("36")]),s("br"),s("span",{staticClass:"line-number"},[n._v("37")]),s("br"),s("span",{staticClass:"line-number"},[n._v("38")]),s("br"),s("span",{staticClass:"line-number"},[n._v("39")]),s("br"),s("span",{staticClass:"line-number"},[n._v("40")]),s("br"),s("span",{staticClass:"line-number"},[n._v("41")]),s("br"),s("span",{staticClass:"line-number"},[n._v("42")]),s("br"),s("span",{staticClass:"line-number"},[n._v("43")]),s("br"),s("span",{staticClass:"line-number"},[n._v("44")]),s("br"),s("span",{staticClass:"line-number"},[n._v("45")]),s("br"),s("span",{staticClass:"line-number"},[n._v("46")]),s("br"),s("span",{staticClass:"line-number"},[n._v("47")]),s("br"),s("span",{staticClass:"line-number"},[n._v("48")]),s("br"),s("span",{staticClass:"line-number"},[n._v("49")]),s("br"),s("span",{staticClass:"line-number"},[n._v("50")]),s("br"),s("span",{staticClass:"line-number"},[n._v("51")]),s("br"),s("span",{staticClass:"line-number"},[n._v("52")]),s("br"),s("span",{staticClass:"line-number"},[n._v("53")]),s("br"),s("span",{staticClass:"line-number"},[n._v("54")]),s("br"),s("span",{staticClass:"line-number"},[n._v("55")]),s("br")])]),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),s("p",[n._v("来张图一目了然😊")]),n._v(" "),s("p",[s("img",{attrs:{src:"https://wendaoshuai66.github.io/study/note/images/3d1.jpg",alt:"https://wendaoshuai66.github.io/study/note/images/sort.jpg"}})])])}),[],!1,null,null,null);s.default=e.exports}}]);