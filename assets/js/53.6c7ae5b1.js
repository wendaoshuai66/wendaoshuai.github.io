(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{337:function(s,n,a){"use strict";a.r(n);var e=a(10),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"php-与-mysql-开发入门中"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#php-与-mysql-开发入门中"}},[s._v("#")]),s._v(" Php 与 MySql 开发入门中")]),s._v(" "),n("h2",{attrs:{id:"php-面向对象的介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#php-面向对象的介绍"}},[s._v("#")]),s._v(" PHP 面向对象的介绍")]),s._v(" "),n("h3",{attrs:{id:"概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[s._v("#")]),s._v(" 概念")]),s._v(" "),n("p",[s._v("在面向对象的程序设计（英语：Object-oriented programming，缩写：OOP）中，对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象。")]),s._v(" "),n("p",[s._v("OOP 达到了软件工程的三个目标：重用性 灵活性 扩展性")]),s._v(" "),n("p",[s._v("OOP 特点：封装 继承 多态")]),s._v(" "),n("h3",{attrs:{id:"面向对象过程-oop-的内容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#面向对象过程-oop-的内容"}},[s._v("#")]),s._v(" 面向对象过程（OOP）的内容")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("类")]),s._v(" − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。")]),s._v(" "),n("li",[n("strong",[s._v("对象")]),s._v(" − 是类的实例。")]),s._v(" "),n("li",[n("strong",[s._v("成员变量")]),s._v(" − 定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可称为对象的属性。")]),s._v(" "),n("li",[n("strong",[s._v("成员函数")]),s._v(" − 定义在类的内部，可用于访问对象的数据。")]),s._v(" "),n("li",[n("strong",[s._v("继承")]),s._v(" − 继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。")]),s._v(" "),n("li",[n("strong",[s._v("父类")]),s._v(" − 一个类被其他类继承，可将该类称为父类，或基类，或超类。")]),s._v(" "),n("li",[n("strong",[s._v("子类")]),s._v(" − 一个类继承其他类称为子类，也可称为派生类。")]),s._v(" "),n("li",[n("strong",[s._v("多态")]),s._v(" − 多态性是指相同的操作或函数、过程可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。")]),s._v(" "),n("li",[n("strong",[s._v("重载")]),s._v(" − 简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。")]),s._v(" "),n("li",[n("strong",[s._v("抽象性")]),s._v(" − 抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关。")]),s._v(" "),n("li",[n("strong",[s._v("封装")]),s._v(" − 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内。")]),s._v(" "),n("li",[n("strong",[s._v("构造函数")]),s._v(" − 主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与 new 运算符一起使用在创建对象的语句中。")]),s._v(" "),n("li",[n("strong",[s._v("析构函数")]),s._v(' − 析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做"清理善后" 的工作（例如在建立对象时用 new 开辟了一片内存空间，应在退出前在析构函数中用 delete 释放）')])]),s._v(" "),n("h3",{attrs:{id:"如何抽象一个类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何抽象一个类"}},[s._v("#")]),s._v(" 如何抽象一个类")]),s._v(" "),n("p",[s._v("类的声名")]),s._v(" "),n("p",[s._v("成员属性")]),s._v(" "),n("p",[s._v("成员方法")]),s._v(" "),n("h2",{attrs:{id:"构造方法与析构方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#构造方法与析构方法"}},[s._v("#")]),s._v(" 构造方法与析构方法")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("class Person{\n    public function __construct($name,$age)\n    {\n        //当这个类new的时候自动执行\n        echo 'hello'.$name;\n        echo '<hr/>';\n        $this->name = $name;\n        $this->age =$age;\n    }\n    public function data(){\n        return $this->age;\n    }\n    public function __destruct()\n    {\n        echo 'bye'.$this->name;\n        echo '<hr/>';\n        // 可以进行资源的释放的操作 例如数据库关闭\n        //对象被销毁的执行，没有代码被运行了\n    }\n}\nnew Person('first',11);\nnew Person('second',12);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("h2",{attrs:{id:"php-魔术方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#php-魔术方法"}},[s._v("#")]),s._v(" PHP 魔术方法")]),s._v(" "),n("h3",{attrs:{id:"使用-get-可以访问私有属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-get-可以访问私有属性"}},[s._v("#")]),s._v(" 使用__get 可以访问私有属性")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("class Person{\n    public $name = 'ls';//共有的\n    private $age=23;//私有的\n    protected $money =10;//受保护的\n    //私有的成员方法，不能再类的外部直接访问\n    private function getAge(){\n        return $this->age;\n    }\n    //受保护的成员方法，不能再类的外部直接访问\n    protected function getMoney(){\n        return $this->money;\n    }\n    //共有的成员方法\n    public function userCard(){\n        return '我的钱有'.$this->getMoney().'我的年龄是'.$this->getAge();\n    }\n     //使用__get可以访问私有属性\n    public function __get($name)\n    {\n        if($name==='age'){\n            return '改值不能访问';\n        }\n    }\n\n}\n $xw = new Person();\necho $xw->age;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("h3",{attrs:{id:"set-给类的私有属性赋值时调用-传递需设置的属性名。属性值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#set-给类的私有属性赋值时调用-传递需设置的属性名。属性值"}},[s._v("#")]),s._v(" __set()：给类的私有属性赋值时调用，传递需设置的属性名。属性值")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("class Person{\n    public $name = 'ls';//共有的\n    private $age=23;//私有的\n    protected $money =10;//受保护的\n    //私有的成员方法，不能再类的外部直接访问\n    private function getAge(){\n        return $this->age;\n    }\n    //受保护的成员方法，不能再类的外部直接访问\n    protected function getMoney(){\n        return $this->money;\n    }\n    //共有的成员方法\n    public function userCard(){\n        return '我的钱有'.$this->getMoney().'我的年龄是'.$this->getAge();\n    }\n   //__set()：给类的私有属性赋值时调用，传递需设置的属性名。属性值\n    public function __set($name, $value)\n    {\n        if($name === 'age' && $value === 23){\n            $this->age = 30;\n        }\n    }\n\n}\n $xw = new Person();\n$xw->age =23;\n\necho $xw->userCard();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("h3",{attrs:{id:"isset-和-unset"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#isset-和-unset"}},[s._v("#")]),s._v(" ****************************************************************__isset()：和 __****************************************************************unset()")]),s._v(" "),n("p",[s._v("__isset()：检测对象私有属性时调用，传递检测的属性名，返回 isset($this->属性名)。")]),s._v(" "),n("p",[s._v("__unset()：使用 unset 函数删除对象的私有属性时调用，传递删除的属性名。方法中执行 unset($this->属性名)。")]),s._v(" "),n("h3",{attrs:{id:"tostring-使用-echo-打印对象时调用-返回打印对象时想要显示的内容-返回必须是字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tostring-使用-echo-打印对象时调用-返回打印对象时想要显示的内容-返回必须是字符串"}},[s._v("#")]),s._v(" _toString()：使用 echo 打印对象时调用，返回打印对象时想要显示的内容，返回必须是字符串")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v('class Player{\n    private $name;\n    function __construct( $name ){\n        $this->name = $name;\n    }\n\n    function __toString(){\n        //__toString方法必须加一个return\n        return $this->name;\n    }\n}\n\n$player_1 = new Player( "kobe" );\necho $player_1;\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"call-调用一个类中未定义的方法或者私有、受保护的方法时自动调用-call-函数。传递被调用的函数名及参数列表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#call-调用一个类中未定义的方法或者私有、受保护的方法时自动调用-call-函数。传递被调用的函数名及参数列表"}},[s._v("#")]),s._v(" __call()：调用一个类中未定义的方法或者私有、受保护的方法时自动调用__call 函数。传递被调用的函数名及参数列表")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v('\nclass Player{\n    public $name;\n    function __construct( $name ){\n        echo "构造函数<br>";\n        $this->name = $name;\n    }\n    private function getName(){\n        return $this->$name;\n    }\n\n    function __call( $funcName, $funcParams ){\n        echo "调用的函数是$funcName, 参数列表是：";\n        print_r( $funcParams );\n    }\n}\n\n$player_1 = new Player( "kobe" );\necho $player_1->setName( "james" );\necho "<br>";\necho $player_1->getName();\necho "<br>";\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br")])]),n("h3",{attrs:{id:"clone-当使用-clone-关键字克隆一个对象时自动调用-作用是为新克隆的对象初始化赋值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#clone-当使用-clone-关键字克隆一个对象时自动调用-作用是为新克隆的对象初始化赋值"}},[s._v("#")]),s._v(" __clone()：当使用 clone 关键字克隆一个对象时自动调用，作用是为新克隆的对象初始化赋值")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("//禁止克隆对象\n   private function __clone(){}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"sleep-对象序列化时自动调用-返回一个数组-数组中的值就是可以序列化的属性。可以定义-serialize-序列化时返回的数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sleep-对象序列化时自动调用-返回一个数组-数组中的值就是可以序列化的属性。可以定义-serialize-序列化时返回的数据"}},[s._v("#")]),s._v(" _sleep()：对象序列化时自动调用，返回一个数组，数组中的值就是可以序列化的属性。可以定义 serialize()序列化时返回的数据")]),s._v(" "),n("h3",{attrs:{id:"wakeup-对象反序列化时调用-为反序列化新产生的对象进行初始化赋值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#wakeup-对象反序列化时调用-为反序列化新产生的对象进行初始化赋值"}},[s._v("#")]),s._v(" __wakeup()：对象反序列化时调用，为反序列化新产生的对象进行初始化赋值")]),s._v(" "),n("h3",{attrs:{id:"serialize-序列化-unserialize-反序列化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#serialize-序列化-unserialize-反序列化"}},[s._v("#")]),s._v(" serialize()序列化 unserialize()反序列化")]),s._v(" "),n("p",[s._v("为了传输方便，可以把对象转化程二进制，等到达另一端的时候，再还原成原来的对象。\n1、一个对象再网络中传输的时候需要将对象串形化 2、把对象写入文件或者数据库的时候用到串形化")]),s._v(" "),n("h3",{attrs:{id:"autolaod-自动加载-可以理解程按需加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#autolaod-自动加载-可以理解程按需加载"}},[s._v("#")]),s._v(" autolaod()自动加载 可以理解程按需加载")]),s._v(" "),n("p",[s._v("autoload()是专门为很多类不存在设计的，很多框架利用这个实现了类文件的自动加载")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("function __autoload($classname)\n{\n    require_once $classname . 'php';\n}\n\n//当Myclass1不存在的时候，自动调用__autoload()函数，传入参数Myclass1;\n$obj1 = new Myclass1();\n$obj2 = new Myclass2();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h2",{attrs:{id:"php-面向对象的继承和多态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#php-面向对象的继承和多态"}},[s._v("#")]),s._v(" PHP 面向对象的继承和多态")]),s._v(" "),n("p",[s._v("子类中重载父类的方法：在子类中允许重写（覆盖）父类中的方法，在子类中，使用 parent 访问父类中被覆盖的属性和方法")]),s._v(" "),n("p",[s._v("例如：")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("parent::construct()\nparent::fun()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("重载：方法名一样根据传递的参数不一样调用。")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("class Person{\n    public $name;//外部能访问，子类能继承\n    private $age;//外部不能访问，子类不能继承\n    protected $money;//外部不能访问，子类能继承\n    public function __construct($name,$age,$money)\n    {\n        $this->name=$name;\n        $this->age=$age;\n        $this->money = $money;\n    }\n    public function getCard(){\n        echo '名字'.$this->name.'年龄'.$this->age.'钱'.$this->money;\n    }\n}\nclass Yellow extends Person{\n    //重写\n    public function __construct($name, $age, $money)\n    {\n        //重载\n        parent::__construct($name, $age, $money);\n    }\n    //重写\n    public function getCard(){\n        echo $this->money;//能够继承父类被保护的属性\n        //重载\n        parent::getCard();\n    }\n}\n$s= new Yellow('xiaowang',18,10);\n$s->getCard();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("h2",{attrs:{id:"php-抽象类与接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#php-抽象类与接口"}},[s._v("#")]),s._v(" PHP 抽象类与接口")]),s._v(" "),n("h3",{attrs:{id:"抽象方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#抽象方法"}},[s._v("#")]),s._v(" 抽象方法")]),s._v(" "),n("p",[s._v('我们在类里面定义的没有方法提的方法就是抽象方法。所谓的没有方法体指的是，在声明的时候没有大括号以及其中的内容，而是直接在声明时在方法名后加上分号结束，另外在声明抽象方法时方法还要加一个关键字"abstract"来修饰。')]),s._v(" "),n("p",[s._v("例如：")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("abstract function fun1(); \nabstract function fun2(); \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"抽象类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[s._v("#")]),s._v(" 抽象类")]),s._v(" "),n("p",[s._v("只要一个类里面有一个方法是抽象方法，那么这个类就定义为抽象类，抽象类也要使用“abstract”关键字来修饰；在抽象类里面可以有不是抽象的方法和成员属性，但只要有一个方法是抽象的方法，这个类就必须声明为抽象类，使用“abstract”修饰。")]),s._v(" "),n("p",[s._v("抽像类的特点：不能实例化的，也就是不能 new 成对象；若想使用类，就必须定义一个类继承这个抽象类，并定义覆盖父类的抽象方法(实现抽象方法)。")]),s._v(" "),n("p",[s._v("例如：")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("abstract class demo{\nvar $test;\nabstract function fun1();\nabstract function fun2();\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("1.含有抽象方法的类必须是抽象类。")]),s._v(" "),n("p",[s._v("2.抽象类不一定非的含有抽象方法。")]),s._v(" "),n("p",[s._v("3.抽象类可以含有普通方法。")]),s._v(" "),n("p",[s._v("4.抽象类不能被实例化，必须有一个子类继承并且把抽象类的抽象方法实现。")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("abstract class Person{\n    //抽象类中可以有普通方法\n    public function eat(){\n        echo '吃';\n    }\n    //抽象方法 没有方法体\n    public abstract function run();\n}\n//抽象类必须有一个子类继承，并且实现抽象类中的抽象方法\nclass Man extends Person{\n    function __construct()\n    {\n    }\n    //抽象类中抽象方法必须在子类中实现\n    public function run()\n    {\n        // TODO: Implement run() method.\n        echo 'run';\n    }\n}\n$man =new Man();\n$man->eat();\n$man->run();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("h3",{attrs:{id:"接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[s._v("#")]),s._v(" 接口")]),s._v(" "),n("p",[s._v("1.接口的关键字是 interface")]),s._v(" "),n("p",[s._v("2.接口可以声明常量也可以抽象一些方法。")]),s._v(" "),n("p",[s._v("3.接口中的方法都是抽象方法，不用 abstract 定义")]),s._v(" "),n("p",[s._v("4.接口不能被实例化，需要一个类去实现它。")]),s._v(" "),n("p",[s._v("5.一个类不能继承多个类，一个类可以实现多个接口")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("interface Person{\n    //接口中可以声明常量，也可以抽象方法，抽象方法不用abstract去定义\n    const name = \"xiaowang\";\n    public function run();\n    public function eat();\n}\ninterface Study {\n    public function study();\n}\n//一个类不可以继承多个类，但是一个类可以实现多个接口，并且接口中的抽象方法必须有子类实现\nclass Student implements Person,Study{\n    const data = 3.14;\n    function run()\n    {\n        // TODO: Implement run() method.\n        echo 'run';\n    }\n    function eat()\n    {\n        // TODO: Implement eat() method.\n        echo 'eat';\n    }\n    function study()\n    {\n        echo 'study';\n    }\n    function test(){\n        return self::data;\n    }\n    //静态的方法\n    static function test1(){\n        return self::data;\n    }\n}\n$xw = new Student();\necho $xw::name;\necho $xw->test();\necho $xw::test1();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br")])]),n("h2",{attrs:{id:"关键字"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#关键字"}},[s._v("#")]),s._v(" 关键字")]),s._v(" "),n("p",[n("strong",[s._v("final：只能用来修饰类和方法，不能修饰成员属性")]),s._v("\n特性：\n使用 final 关键字标识的类不能被继承\n使用 funal 关键字标识的方法不能被子类覆盖（重新），是最终版本\n目的：\n1.安全，2.没必要继承或重新")]),s._v(" "),n("p",[n("strong",[s._v("static：用于修饰类的成员属性和成员方法（即静态属性和静态方法）")]),s._v("\n类中的静态属性和方法不用实例化（new）就可以直接使用类名访问\n格式：\n类::$静态属性 类::$静态方法\n在类的方法中，不能用 this->来引用变量或静态方法，而需要用 self 来引用\nself::$静态属性 self::$静态方法\n静态方法中不可以使用非静态的内容，就是不让用$this\n静态属性是共享的，也就是 new 很多对象也是公用一个属性")]),s._v(" "),n("p",[n("strong",[s._v("单例设计模式：一个类只能有一个实例对象存在")]),s._v("\n静态属性是共享的，也就是 new 很多对象也是公用一个属性")]),s._v(" "),n("p",[n("strong",[s._v("instanceof ：用于检测当前对象实例是否属于某一个类或这个类的子类")])]),s._v(" "),n("p",[s._v("php 中当 new 实例化一个不存在的类时，则自动调用此函数__autoload()，并将类名作为参数传入此函数。可 以使用这个实现类的自动加载。\n对象串行化（序列化）\nclass_exists：检查类是否已定义\nget_class_methods：返回由类的方法名组成的数组\nget_class：返回对象的类名\nget_object_vars：返回由对象属性组成的关联数组\nget_parent_class：返回对象或类的父类名\nis_a：如果对象属于该类或该类是此对象的父类，则返回 TRUE\nmethod_exits：检查类的方法是否存在\nproperty_exists：检查对象或类是否具有该属性")]),s._v(" "),n("h2",{attrs:{id:"异常处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[s._v("#")]),s._v(" 异常处理")]),s._v(" "),n("p",[s._v("系统自带的异常处理")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("try{\n…\nif($_GET['num']==1){\n        throw new Exception('user');\n    }\n} catch(Exception $e) { // Exception错误类\necho “错误的文件：”;\necho $e -> getFile(); // 得到发生异常的文件\necho “错误的行：”;\necho $e -> getLine(); // 得到发生异常的行\necho “错误的代码：”;\necho $e -> getCode(); // 得到发生异常的代码\necho “错误信息：”;\necho $e -> getMessage(); // 异常信息\n}\n自定义异常处理\nclass myException extends Exception { // 继承错误类\n…\n}\n捕捉多个异常处理\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("h2",{attrs:{id:"php-pdo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#php-pdo"}},[s._v("#")]),s._v(" PHP PDO")]),s._v(" "),n("h3",{attrs:{id:"如何使用-pdo-连接数据库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何使用-pdo-连接数据库"}},[s._v("#")]),s._v(" 如何使用 PDO 连接数据库")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v('<?php\nheader("Content-Type:text/html;charset=utf-8");\n$dbms = "mysql";\n$host = "localhost";\n$dbName = "phplesson";\n$user = "root";\n$pass = "";\n$dsn = "$dbms:host=$host;dbname=$dbName";\ntry {\n    $dbh = new PDO($dsn, $user, $pass);\n    $dbh -> query(\'set names utf-8\');\n\n    echo "连接成功！";\n    $newstitle = $_REQUEST[\'newstitle\'];\n    $newsimg = $_REQUEST[\'newsimg\'];\n    $newscontent = $_REQUEST[\'newscontent\'];\n    $addtime = $_REQUEST[\'addtime\'];\n    $query = "INSERT INTO `news`(`newstitle`, `newsimg`, `newscontent`, `addtime`) VALUES (\'" . $newstitle . "\',\'" . $newsimg . "\',\'" . $newscontent . "\',\'" . $addtime . "\')";\n\n//    foreach ($dbh->query("SELECT*FROM `news`WHERE 1") as $row) {\n//        print_r($row);\n//    }\n//    $query = "INSERT INTO `news`(`newstitle`, `newsimg`, `newscontent`, `addtime`) VALUES (\'题1111  11目1\',\'图片\',\'内容\',\'2015-09-01\')";\n//    $query = "DELETE FROM `news` WHERE \'newsid\'=15";\n\n    $res = $dbh->exec($query);\n    echo "数据库操作成功，受影响的函数" . $res;\n    $dbh = null;\n} catch (PDOException $e) {\n    die("Error" . $e . getMessage() . "</br>");\n}\n?>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("h3",{attrs:{id:"什么是单例模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是单例模式"}},[s._v("#")]),s._v(" 什么是单例模式")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v("单例模式三个要点：\n1.需要一个保存类的唯一实例的静态成员变量：\nprivate static $_instance;\n2.private function __construct()\n{\n    $this->_db = pg_connect('xxxx');\n}\nprivate function __clone()\n{\n}//覆盖__clone()方法，禁止克隆\n3.必须提供一个访问这个实例的公共的静态方法（通常为getInstance方法），从而返回唯一实例的一个引用\n\npublic static function getInstance()\n{\n    if(! (self::$_instance instanceof self) )\n    {\n        self::$_instance = new self();\n    }\n    return self::$_instance;\n\n} \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("h3",{attrs:{id:"php-单例模式封装数据库的增删改查"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#php-单例模式封装数据库的增删改查"}},[s._v("#")]),s._v(" PHP 单例模式封装数据库的增删改查")]),s._v(" "),n("div",{staticClass:"language-plain line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-plain"}},[n("code",[s._v('<?php\nclass Db{\n    //需要一个保存类的唯一实例的静态成员变量\n    //数据库连接对象\n    private static $_instance;\n    private static $table_name;\n    private $pdo;\n    private function __construct()\n    {\n        $this->pdo = new PDO("mysql:host=localhost;dbname=phptest","root","");\n        $this->pdo->query("set names utf8");\n    }\n    //覆盖__clone()方法，禁止克隆\n    private function __clone()\n    {\n    }\n    //必须提供一个访问这个实例的公共的静态方法（通常为getInstance方法），从而返回唯一实例的一个引用\n    //返回数据库实例对象\n    public static function getDb($table_name)\n    {\n        self::$table_name = $table_name;\n        if(! (self::$_instance instanceof self) )\n        {\n            self::$_instance = new self();\n        }\n        return self::$_instance;\n\n    }\n    function add($table_name, $data){\n        $keys = implode(",", array_keys($data));\n        $value = "\'".implode("\',\'", array_values($data))."\'";\n        $sql = "insert into $table_name ($keys) values($value) ";\n        $r = $this->pdo->exec($sql);\n        $this->getErrorInfo();\n        return $r;\n    }\n    function addAll($table_name, $data){\n        $keys = implode(",", array_keys($data[0]));\n\n        $arr = [];\n        foreach ($data as $k => $v) {\n            $arr[] = "(\'".implode("\',\'", array_values($v))."\')";\n        }\n        $value = implode(",", $arr);\n\n        $sql = "insert into $table_name ($keys) values $value";\n        $r = $this->pdo->exec($sql);\n        $this->getErrorInfo();\n        return $r;\n\n    }\n    function update($table_name, $data){\n        $id = $data[\'id\'];\n        unset($data[\'id\']);\n        $arr = [];\n        foreach($data as $k=>$v){\n            $arr[] = $k."=\'".$v ."\'";\n        }\n        $str = implode(",", $arr);\n        $sql = "update $table_name set $str where id=$id";\n\n        $r = $this->pdo->exec($sql);\n        $this->getErrorInfo();\n        return $r;\n    }\n\n    function select($table_name, $where = \'1=1\'){\n        $sql = "select * from $table_name where $where ";\n        $res = $this->pdo->query($sql)->fetchAll(PDO::FETCH_ASSOC);\n        $this->getErrorInfo();\n        return $res;\n\n    }\n    function find($table_name, $where = \'1=1\'){\n        $sql = "select * from $table_name where $where ";\n        $res = $this->pdo->query($sql)->fetch(PDO::FETCH_ASSOC);\n        $this->getErrorInfo();\n        return $res;\n    }\n    function getErrorInfo(){\n        if($this->pdo->errorCode() != \'00000\'){\n            echo "<pre>";\n            print_r($this->pdo->errorInfo());\n            exit;\n        }\n    }\n    function delete($id){\n        $table_name = self::$table_name;\n        if(is_array($id)){\n            $id = implode(\',\', $id);\n        }\n        $sql = "delete from $table_name where id in ($id)";\n        $r = $this->pdo->exec($sql);\n        $this->getErrorInfo();\n        return $r;\n    }\n}\nfunction M($table_name){\n    $db = Db::getDb($table_name);\n    return $db;\n};\n$r = M(\'news\')->delete(726);\necho $r;\n?>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br"),n("span",{staticClass:"line-number"},[s._v("73")]),n("br"),n("span",{staticClass:"line-number"},[s._v("74")]),n("br"),n("span",{staticClass:"line-number"},[s._v("75")]),n("br"),n("span",{staticClass:"line-number"},[s._v("76")]),n("br"),n("span",{staticClass:"line-number"},[s._v("77")]),n("br"),n("span",{staticClass:"line-number"},[s._v("78")]),n("br"),n("span",{staticClass:"line-number"},[s._v("79")]),n("br"),n("span",{staticClass:"line-number"},[s._v("80")]),n("br"),n("span",{staticClass:"line-number"},[s._v("81")]),n("br"),n("span",{staticClass:"line-number"},[s._v("82")]),n("br"),n("span",{staticClass:"line-number"},[s._v("83")]),n("br"),n("span",{staticClass:"line-number"},[s._v("84")]),n("br"),n("span",{staticClass:"line-number"},[s._v("85")]),n("br"),n("span",{staticClass:"line-number"},[s._v("86")]),n("br"),n("span",{staticClass:"line-number"},[s._v("87")]),n("br"),n("span",{staticClass:"line-number"},[s._v("88")]),n("br"),n("span",{staticClass:"line-number"},[s._v("89")]),n("br"),n("span",{staticClass:"line-number"},[s._v("90")]),n("br"),n("span",{staticClass:"line-number"},[s._v("91")]),n("br"),n("span",{staticClass:"line-number"},[s._v("92")]),n("br"),n("span",{staticClass:"line-number"},[s._v("93")]),n("br"),n("span",{staticClass:"line-number"},[s._v("94")]),n("br"),n("span",{staticClass:"line-number"},[s._v("95")]),n("br"),n("span",{staticClass:"line-number"},[s._v("96")]),n("br"),n("span",{staticClass:"line-number"},[s._v("97")]),n("br"),n("span",{staticClass:"line-number"},[s._v("98")]),n("br"),n("span",{staticClass:"line-number"},[s._v("99")]),n("br"),n("span",{staticClass:"line-number"},[s._v("100")]),n("br"),n("span",{staticClass:"line-number"},[s._v("101")]),n("br"),n("span",{staticClass:"line-number"},[s._v("102")]),n("br"),n("span",{staticClass:"line-number"},[s._v("103")]),n("br"),n("span",{staticClass:"line-number"},[s._v("104")]),n("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);