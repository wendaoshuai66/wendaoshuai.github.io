(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{224:function(s,n,e){"use strict";e.r(n);var a=e(0),r=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[s._v("#")]),s._v(" Promise")]),s._v(" "),e("h2",{attrs:{id:"什么是-promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是-promise"}},[s._v("#")]),s._v(" 什么是 Promise")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function add(getX,getY,cb){\n\tvar x,y;\n\tgetX(function(val){\n\t   x= val;\n\t   // 两者都准备好了？\n\t\tif(y!=undefined){\n\t\t  cb(x+y) // 发送加法的结果\n\t\t}\n\t})\n\tgetY(function(val){\n\t\ty= val;\n\t\t// 两者都准备好了？\n\t\tif(x!=undefined){\n\t\t cb(x+y) // 发送加法的结果\n\t\t}\n\t})\n}\nvar fetchX =function(fn){\n\tsetTimeout(function(){\n\t fn(1)\n\t},1000)\n}\nvar fetchY =function(fn){\n\tsetTimeout(function(){\n\t fn(3)\n\t},2000)\n}\nadd(fetchX,fetchY,function(sum){\n  console.log(sum)//4\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br")])]),e("p",[s._v("花点儿时间来感受一下这段代码的美妙（或者丑陋），我耐心地等你。")]),s._v(" "),e("p",[s._v("虽然丑陋是无法否认的，但是关于这种异步模式有一些非常重要的事情需要注意。")]),s._v(" "),e("p",[s._v("在这段代码中，我们将 x 和 y 作为未来的值对待，我们将 add(..)操作表达为：（从外部看来）它并不关心 x 或 y 或它们两者现在是否可用。换句话所，它泛化了 现在 和 稍后，如此我们可以信赖 add(..)操作的一个可预测的结果。")]),s._v(" "),e("p",[s._v("通过使用一个临时一致的 add(..)——它跨越 现在 和 稍后 的行为是相同的——异步代码的推理变得容易的多了。")]),s._v(" "),e("p",[s._v("更直白地说：为了一致地处理 现在 和 稍后，我们将它们都作为 稍后：所有的操作都变成异步的。")]),s._v(" "),e("p",[s._v("当然，这种粗略的基于回调的方法留下了许多提升的空间。为了理解在不用关心 未来的值 在时间上什么时候变得可用的情况下推理它而带来的好处，这仅仅是迈出的一小步。")]),s._v(" "),e("h2",{attrs:{id:"promise-值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-值"}},[s._v("#")]),s._v(" Promise 值")]),s._v(" "),e("p",[s._v("我们先简单地看一下我们如何通过 Promise 来表达 x + y 的例子：")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function add (xPromise,yPromise){\n         // `Promise.all([ .. ])`接收一个Promise的数组，\n        // 并返回一个等待它们全部完成的新Promise\n        return Promise.all([xPromise,yPromise])\n         // 当这个Promise被解析后，我们拿起收到的`X`和`Y`的值，并把它们相加\n        .then(values=>{\n         // `values`是一个从先前被解析的Promise那里收到的消息数组\n            return values[0]+values[1]\n        })\n    }\n\nvar fetchX =function(){\n   return new Promise((reslove,reject)=>{\n        setTimeout(function(){\n            reslove(1)\n        },1000)\n   })\n}\nvar fetchY =function(){\n  return new Promise((reslove,reject)=>{\n        setTimeout(function(){\n            reslove(2)\n        },2000)\n   })\n}\n\n// 为了将两个数字相加，我们得到一个Promise。\n// 现在我们链式地调用`then(..)`来等待返回的Promise被解析\nadd(fetchX(),fetchY()).then(sum=>{\n console.log(sum)//3\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br")])]),e("p",[s._v("注意： 在 add(..)内部。Promise.all([ .. ])调用创建了一个 promise（它在等待 promiseX 和 promiseY 被解析）。链式调用.then(..)创建了另一个 promise，它的 return values[0] + values[1]这一行会被立即解析（使用加法的结果）。这样，我们链接在 add(..)调用末尾的 then(..)调用——在代码段最后——实际上是在第二个被返回的 promise 上进行操作，而非被 Promise.all([ .. ])创建的第一个 promise。另外，虽然我们没有在这第二个 then(..)的末尾链接任何操作，它也已经创建了另一个 promise，我们可以选择监听/使用它。")]),s._v(" "),e("h2",{attrs:{id:"实现⼀个完整的-promise-a"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现⼀个完整的-promise-a"}},[s._v("#")]),s._v(" 实现⼀个完整的 Promise/A+")]),s._v(" "),e("p",[s._v("简单来说，promise 主要就是为了解决异步回调问题。其主流规范目前主要是 Promise/A+在开始前，我们先写⼀个 promise 应⽤场景来体会下 promise 的作⽤")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function fn1(resolve,reject) {\n        setTimeout(()=>{\n            console.log('步骤1：执行')\n            resolve(1)\n        },500)\n    }\n    function fn2(resolve,reject) {\n        setTimeout(()=>{\n            console.log('步骤2：执行')\n            resolve(2)\n        },100)\n    }\n    new Promise(fn1).then(res=>{\n        console.log(res)\n        return new Promise(fn2)\n    }).then(res=>{\n        console.log(res)\n        return 333\n    }).then(res=>{\n        console.log(res)\n    })\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("h3",{attrs:{id:"初步构建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初步构建"}},[s._v("#")]),s._v(" 初步构建")]),s._v(" "),e("p",[s._v("写一个简单的 promise，promise 的参数是函数 fn，把内部定义 resolve 方法作为参数传到 fn 中，调用 fn。当异步操作成功后会调用 reslove，然后就会执行 then 注册的回调")]),s._v(" "),e("p",[s._v("废话不多说上代码")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\nfunction Promsie(fn) {\n    //需要一个成功时的回调\n    var callback;\n    //一个实例的方法，用来注册异步事件\n    this.then = function(done) {\n        callback = done;\n    }\n\n    function reslove(value) {\n        callback(value);\n    }\n    fn(reslove)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("h3",{attrs:{id:"加入链式支持"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加入链式支持"}},[s._v("#")]),s._v(" 加入链式支持")]),s._v(" "),e("p",[s._v("下面加入链式，成功回调的方法就得变成数组才能存储。同时我们给 resolve ⽅法添加参数，这样就不会输出 undefined。")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function Promise() {\n    var promsie = this,\n        value = null,\n        promise._resloves = [];\n    this.then = function (onFulfiled) {\n        promise._resloves.push(onFulfiled)\n        return this;\n    }\n     function reslove(value) {\n         promise._resloves.forEach(callback=>{\n             callback(value)\n         })\n     }\n     fn(reslove)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[s._v("1.promise = this， 这样我们不用担心某个时刻 this 指向突然改变问题。")]),s._v(" "),e("p",[s._v("2.调用 then 方法，将回调放⼊promise._resloves 队列；")]),s._v(" "),e("p",[s._v("3.创建 Promise 对象同时，调用其 fn, 并传入 resolve 方法，当 fn 的异步操作执⾏成功后，就会调用 resolve ，也就是执行 promise._resloves 队列中的回调；")]),s._v(" "),e("p",[s._v("4.resolve 方法接收⼀个参数，即异步操作返回的结果，⽅便传值")]),s._v(" "),e("p",[s._v("5.then⽅法中的 return this 实现了链式调用⽤。但是目前的 Promise 还存在一些问题，如果我传入的是一个不包含异步操作的函数，")]),s._v(" "),e("p",[s._v("reslove 就会先于 then 执⾏，也就是说 promise._resloves 是⼀个空数组。\n解决方法：为了解决这个问题，我们可以在 reslove 中添加 setTimeout，来将 reslove 中执⾏回调的逻辑放置到 JS 任务队列末尾")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function Promise() {\n        var promsie = this,\n            value = null,\n            promise._resloves = [];\n        this.then = function (onFulfiled) {\n            promise._resloves.push(onFulfiled)\n            return this;\n        }\n        function reslove(value) {\n            setTimeout(()=>{\n                promise._resloves.forEach(callback=>{\n                    callback(value)\n                })\n            },0)\n        }\n        fn(reslove)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("h3",{attrs:{id:"引入状态，干干，干就完了"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引入状态，干干，干就完了"}},[s._v("#")]),s._v(" 引入状态，干干，干就完了")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('function Promise() {\n    var promise = this,\n        value = null;\n        promise_resloves = [],\n        promise._status = "PENDING";\n    this.then = function (onFulfilled) {\n        if(promise._status === "PENDING"){\n            promise_resloves.push(onFulfilled)\n        }\n        return this;\n    }\n    function reslove(value) {\n       setTimeout(()=>{\n           promise._status = \'FULFILLED\'\n           promise_resloves.forEach(callback=>{\n               callback(value)\n           })\n       },0)\n    }\n    fn(reslove);\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("p",[s._v("每个 Promise 存在三个互斥状态：pending、fulfilled、rejected。Promise 对象的状态改变，只有两种可能：从 pending 变为 fulfilled 和从 pending 变为 rejected。只要这两种情况发⽣，状态就凝固了，不会再变了，会⼀直保持这个结果。就算改变已经发⽣了，你再对 Promise 对象添加回调函数，也会⽴即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。")]),s._v(" "),e("h3",{attrs:{id:"加上异步结果的传递"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加上异步结果的传递"}},[s._v("#")]),s._v(" 加上异步结果的传递")]),s._v(" "),e("p",[s._v("前的写法都没有考虑异步返回的结果的传递，我们来加上结果的传递：")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function Promise(fn) {\n    var promise = this,\n        value = null,\n        promise._reslove = [],\n        promise._status = 'PENDING';\n    this.then = function (onFulfilled) {\n        if(promise._status === 'PENDING'){\n            promise._reslove.push(onFulfilled)\n        }\n        return this;\n    }\n    function reslove(value) {\n        setTimeout(()=>{\n            promise._status = 'FULFILLED';\n            promise._reslove.forEach(callback=>{\n                value=callback(value)\n            })\n        },0)\n    }\n    fn(reslove)\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("h3",{attrs:{id:"串行-promise"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#串行-promise"}},[s._v("#")]),s._v(" 串行 Promise")]),s._v(" "),e("p",[s._v("串行 Promise 是指在当前 promise 达到 fulfilled 状态后，即开始进行⾏下⼀一个 promise（后邻 promise）。例如我们先⽤ajax 从后台获取⽤用户的的数据，再根据该数据去获取其他数据。这⾥我们主要对 then ⽅法进⾏改造：")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function Promsie(fn) {\n        var promise = this,\n            value = null,\n            promise._reslove = [],\n            promise._status = 'PENDING';\n        this.then = function (onfuilled) {\n            return new Promsie(function (reslove) {\n                function handle(value) {\n                    var ret = isFunction(onfuilled) && onfuilled(value) || value;\n                    reslove(ret)\n                }\n                if(promise._status === 'PENDING'){\n                    promise._reslove.push(handle)\n                }else if(promise._status === 'FULFILLED'){\n                    handle(value);\n                }\n            })\n        }\n        function reslove(value) {\n            setTimeout(()=>{\n                promise._status = 'FULFIILED';\n                promise._reslove.forEach(callback=>{\n                    value = callback(value)\n                })\n            },0)\n        }\n        fn(reslove)\n    }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])]),e("p",[s._v("then 方法该改变⽐较多啊，这⾥我解释下：")]),s._v(" "),e("p",[s._v("注意的是，new Promise() 中匿名函数中的 promise （promise._resolves 中的 promise）指向的都是上⼀个 promise 对象， ⽽不是当前这个刚刚创建的。先我们返回的是新的⼀个 promise 对象，因为是同类型，所以链式仍然可以实现。")]),s._v(" "),e("p",[s._v("其次，我们添加了⼀个 handle 函数，handle 函数对上一个 promise 的 then 中回调进行了处理，并且调⽤了当前的 promise 中的 resolve ⽅法。")]),s._v(" "),e("p",[s._v("接着将 handle 函数添加到 上⼀个 promise 的 promise._resolves 中，当异步操作成功后就会执⾏\nhandle 函数，这样就可以 执⾏ 当前 promise 对象的回调⽅法。我们的⽬的就达到了。")]),s._v(" "),e("p",[s._v("如果这里你会看到晕看下面的代码")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" new Promise(fn1).then(fn2).then(fn3)})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("1.首先我们创建了一个 Promise 的实例，叫做 promsie1；接着就会运行 fn1(reslove);")]),s._v(" "),e("p",[s._v("2.但是 fn1 中有一个 setTimeout 函数，于是就会跳过这一部分；运行后面第一个 then 方法；")]),s._v(" "),e("p",[s._v("3 then 返回一个新对象 promise2，promise2 对象的 reslove 方法和 then 方法中回调函数 fn2 都会被封装到 handle 中然后 handle 被添加到 promsie1._reslve 数组中")]),s._v(" "),e("p",[s._v("4.接着运行第二个 then 方法，同样返回一个新对象 promise3，promise3 对象的 reslove 方法和 then 方法中回调函数 fn3 都会被封装到 handle 中然后 handle 被添加到 promsie2._reslove 数组中")]),s._v(" "),e("p",[s._v("5.到此两个 then 运行结束后 setTimeout 中的延迟时间⼀到，就会调⽤ promise1 的 resolve⽅法。")]),s._v(" "),e("p",[s._v("6.resolve ⽅方法的执行⾏，会调用⽤ promise1._resolves 数组中的回调，之前我们添加的 handle ⽅法就会被执行⾏； 也就是 fn2 和 promsie2 的 resolve 方⽅法，都被调⽤用了。")]),s._v(" "),e("p",[s._v("7 以此类推，fn3 会和 promise3 的 resolve ⽅法 ⼀起执⾏，因为后⾯没有 then ⽅法了,promise3._resolves 数组是空的 。")]),s._v(" "),e("p",[s._v("8 ⾄此所有回调执⾏结束但这⾥还存在⼀个问题，就是我们的 then ⾥⾯函数不能对 Promise 对象进⾏处理。这⾥我们需要再次 对 then 进⾏修改，使其能够处理 promise 对象。")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v(" function Promsie(fn) {\n                var promise = this,\n                    value = null,\n                    promise._reslove = [],\n                    promise._status = 'PENDING';\n                this.then = function(onfuilled) {\n                    return new Promsie(function(reslove) {\n                        function handle(value) {\n                            var ret = typeof onfuilled == \"function\" && onfuilled(value) || value;\n                            if (ret && typeof ret['then'] === \"function\") {\n                                ret.then(function(value) {\n                                    reslove(value);\n                                })\n                            } else {\n                                reslove(value)\n                            }\n                            reslove(ret)\n                        }\n                        if (promise._status === 'PENDING') {\n                            promise._reslove.push(handle)\n                        } else if (promise._status === 'FULFILLED') {\n                            handle(value);\n                        }\n                    })\n                }\n\n            function reslove(value) {\n                setTimeout(() => {\n                    promise._status = 'FULFIILED';\n                    promise._reslove.forEach(callback => {\n                        value = callback(value)\n                    })\n                }, 0)\n            }\n            fn(reslove)\n        }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br")])]),e("h3",{attrs:{id:"失败处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#失败处理"}},[s._v("#")]),s._v(" 失败处理")]),s._v(" "),e("p",[s._v("异步操作不不可能都成功，在异步操作失败时，标记其状态为 rejected，并执⾏行行注册的失败回调。 有了了之前处理理 fulfilled 状态的经验，⽀支持错误处理理变得很容易易。毫⽆无疑问的是，在注册回调、处理理状态")]),s._v(" "),e("p",[s._v("变更更上都要加⼊入新的逻辑:")]),s._v(" "),e("p",[s._v("上代码吧")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function Promise(fn) {\n            var promise = this;\n            promise._status = 'PENDING';\n            promise._values;\n            promise._reason;\n            promise._reslove = [];\n            promise._reject = [];\n            this.then = function(onFulfilled, onRejected) {\n                return new Promise(function(reslove, reject) {\n                    function handle(values) {\n                        var ret = (typeof onFulfilled === 'function' && onFulfilled(values)) || values\n                        if (ret && typeof ret['then'] === 'function') {\n                            ret.then(function(value) {\n                                reslove(value)\n                            }, function(reason) {\n                                reject(reason)\n                            })\n                        } else {\n                            reslove(ret)\n                        }\n                    }\n\n                    function errback(values) {\n                        var reason = (typeof onRejected === 'function' && onRejected(values)) || values\n                        reject(values)\n                    }\n                    if (promise._status === 'PENDING') {\n                        promise._reslove.push(handle)\n                        promise._reject.push(errback)\n                    } else if (promise._status === 'FULFILLED') {\n                        promise._reslove.push(promise._values)\n                    } else if (promise._status === 'REJECTED') {\n                        promise._reject.push(promise._reason)\n                    }\n                })\n            }\n\n            function reslove(values) {\n                setTimeout(() => {\n                    promise._status = 'FULFILLED';\n                    promise._reslove.forEach(callback => {\n                        promise._values = callback(values)\n                    });\n                }, 0)\n            }\n\n            function reject(values) {\n                setTimeout(() => {\n                    promise._status = 'REJECTED';\n                    promise._reject.forEach(callback => {\n                        promise._reason = callback(values)\n                    });\n                }, 0)\n            }\n            fn(reslove, reject)\n        }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br")])]),e("h3",{attrs:{id:"promise-resolve"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-resolve"}},[s._v("#")]),s._v(" Promise.resolve")]),s._v(" "),e("p",[s._v("Promise.resolve(value) 返回一个以给定值解析后的 Promise 对象.")]),s._v(" "),e("p",[s._v("1.如果 value 是个 thenable 对象，返回的 promise 会“跟随”这个 thenable 的对象，采用它的最终状态")]),s._v(" "),e("p",[s._v("2.如果传入的 value 本身就是 promise 对象，那么 Promise.resolve 将不做任何修改、原封不动地返回这个 promise 对象。")]),s._v(" "),e("p",[s._v("3.其他情况，直接返回以该值为成功状态的 promise 对象。")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Promise.resolve = function(value) {\n            if (value instanceof Promise) {\n                return value\n            }\n            return new Promise(function(resolve, reject) {\n\n                if (value && value.then && typeof value.then === 'function') {\n                    setTimeout(() => {\n                        value.then(resolve, reject);\n                    });\n                } else {\n                    resolve(value);\n                }\n            })\n        }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("h3",{attrs:{id:"promise-reject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-reject"}},[s._v("#")]),s._v(" Promise.reject")]),s._v(" "),e("p",[s._v("Promise.reject 方法和 Promise.resolve 不同，Promise.reject()方法的参数，会原封不动地作为 reject 的理由，变成后续方法的参数。")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Promise.reject = function(value) {\n            return new Promise(function(resolve, reject) {\n                reject(value)\n            })\n        }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"promise-prototype-catch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-prototype-catch"}},[s._v("#")]),s._v(" Promise.prototype.catch")]),s._v(" "),e("p",[s._v("Promise.prototype.catch 用于指定出错时的回调，是特殊的 then 方法，catch 之后，可以继续 .then")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Promise.prototype.catch = function (onRejected) {\n    return this.then(null, onRejected);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h3",{attrs:{id:"promise-prototype-finally"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-prototype-finally"}},[s._v("#")]),s._v(" Promise.prototype.finally")]),s._v(" "),e("p",[s._v("不管成功还是失败，都会走到 finally 中,并且 finally 之后，还可以继续 then。并且会将值原封不动的传递给后面的 then.")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Promise.prototype.finally = function (callback) {\n    return this.then((value) => {\n        return Promise.resolve(callback()).then(() => {\n            return value;\n        });\n    }, (err) => {\n        return Promise.resolve(callback()).then(() => {\n            throw err;\n        });\n    });\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("h3",{attrs:{id:"promise-all"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-all"}},[s._v("#")]),s._v(" Promise.all")]),s._v(" "),e("p",[s._v("Promise.all(promises) 返回一个 promise 对象")]),s._v(" "),e("p",[s._v("1.如果传入的参数是一个空的可迭代对象，那么此 promise 对象回调完成(resolve),只有此情况，是同步执行的，其它都是异步返回的。")]),s._v(" "),e("p",[s._v("2.如果传入的参数不包含任何 promise，则返回一个异步完成.")]),s._v(" "),e("p",[s._v("3.promises 中所有的 promise 都 promise 都“完成”时或参数中不包含 promise 时回调完成。")]),s._v(" "),e("p",[s._v("4.如果参数中有一个 promise 失败，那么 Promise.all 返回的 promise 对象失败")]),s._v(" "),e("p",[s._v("5.在任何情况下，Promise.all 返回的 promise 的完成状态的结果都是一个数组")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Promise.all = function(promsies) {\n            if (!Array.isArray(promsies)) {\n                throw new TypeError('You must pass to an array')\n            }\n            return new Promise(function(resolve, reject) {\n                var len = promsies.length,\n                    result = [],\n                    count = len;\n\n                function resolver(index) {\n                    return function(value) {\n                        resolverAll(index, value)\n                    }\n                }\n\n                function rejects(value) {\n                    reject(value)\n                    return\n                }\n\n                function resolverAll(index, value) {\n                    result[index] = value;\n                    --count;\n                    if (count === 0) {\n                        resolve(result)\n                    }\n                }\n                for (var i = 0; i < len; i++) {\n                    Promise.resolve(promsies[i]).then(resolver(i), rejects)\n                }\n            })\n        }\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br")])]),e("h3",{attrs:{id:"promise-race"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#promise-race"}},[s._v("#")]),s._v(" Promise.race")]),s._v(" "),e("p",[s._v("Promise.race 函数返回一个 Promise，它将与第一个传递的 promise 相同的完成方式被完成。它可以是完成（ resolves），也可以是失败（rejects），这要取决于第一个完成的方式是两个中的哪个。")]),s._v(" "),e("p",[s._v("如果传的参数数组是空，则返回的 promise 将永远等待。")]),s._v(" "),e("p",[s._v("如果迭代包含一个或多个非承诺值和/或已解决/拒绝的承诺，则 Promise.race 将解析为迭代中找到的第一个值。")]),s._v(" "),e("div",{staticClass:"language-plain line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("myPromise.race = function(promsies) {\n            if (!Array.isArray(promsies)) {\n                throw new TypeError('You must pass to an array')\n            }\n            return new myPromise(function(resolve, reject) {\n                var len = promsies.length,\n                    result = [],\n                    count = len;\n\n                function resolver(value) {\n                    resolve(value)\n                }\n\n                function rejects(value) {\n                    reject(value)\n                }\n                for (var i = 0; i < len; i++) {\n                    myPromise.resolve(promsies[i].then(resolver, rejects))\n                }\n            })\n        }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])])])}),[],!1,null,null,null);n.default=r.exports}}]);